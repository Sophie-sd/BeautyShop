"""
–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å
"""
from django.contrib import admin
from django.utils.html import format_html
from django.db.models import Q
from datetime import datetime, timedelta
from .models import Order, OrderItem


class OrderItemInline(admin.TabularInline):
    model = OrderItem
    extra = 1
    can_delete = True
    fields = ['product', 'quantity', 'price']
    
    def has_add_permission(self, request, obj=None):
        """–î–æ–∑–≤–æ–ª–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        if obj and obj.pk:
            return True
        return False


@admin.register(Order)
class OrderAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏"""
    
    list_display = [
        'order_number', 'get_customer_name', 'get_status_badge',
        'get_total_display', 'payment_method', 'get_payment_status', 'created_at'
    ]
    list_filter = [
        'status', 
        'payment_method', 
        'delivery_method', 
        'is_paid', 
        ('created_at', admin.DateFieldListFilter),
    ]
    search_fields = [
        'order_number', 'first_name', 'last_name', 
        'email', 'phone', 'delivery_city'
    ]
    readonly_fields = [
        'order_number', 'created_at', 'updated_at',
        'get_total_cost', 'get_customer_info', 'get_items_list'
    ]
    date_hierarchy = 'created_at'
    ordering = ['-created_at']
    list_per_page = 50
    
    inlines = [OrderItemInline]
    
    def has_add_permission(self, request):
        """–ó–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω–∫—É"""
        return False
    
    fieldsets = (
        ('üìã –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('order_number', 'user', 'status', 'created_at', 'updated_at')
        }),
        ('üõí –¢–æ–≤–∞—Ä–∏', {
            'fields': ('get_items_list',),
            'description': '–¢–æ–≤–∞—Ä–∏ –≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ'
        }),
        ('üë§ –ö–ª—ñ—î–Ω—Ç', {
            'fields': ('first_name', 'last_name', 'email', 'phone', 'get_customer_info')
        }),
        ('üöö –î–æ—Å—Ç–∞–≤–∫–∞', {
            'fields': (
                'delivery_method', 'delivery_city', 
                'delivery_address', 'delivery_cost'
            )
        }),
        ('üí≥ –û–ø–ª–∞—Ç–∞', {
            'fields': (
                'payment_method', 'is_paid', 'payment_date',
                'subtotal', 'discount', 'total'
            )
        }),
        ('üìù –ü—Ä–∏–º—ñ—Ç–∫–∏', {
            'fields': ('notes', 'admin_notes'),
            'classes': ('collapse',)
        }),
    )
    
    actions = [
        'mark_as_confirmed', 'mark_as_shipped', 'mark_as_delivered',
        'export_orders_csv', 'send_order_confirmation'
    ]
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º—ñ–∑—É—î–º–æ –∑–∞–ø–∏—Ç–∏"""
        return super().get_queryset(request).select_related('user').prefetch_related('items__product')
    
    def get_status_badge(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º –±–µ–π–¥–∂–µ–º"""
        status_colors = {
            'pending': 'warning',
            'confirmed': 'info',
            'processing': 'info',
            'shipped': 'primary',
            'delivered': 'success',
            'cancelled': 'danger',
            'completed': 'success',
        }
        color = status_colors.get(obj.status, 'secondary')
        return format_html(
            '<span class="badge badge-{}">{}</span>',
            color,
            obj.get_status_display()
        )
    get_status_badge.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def get_payment_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏"""
        if obj.is_paid:
            return format_html('<span class="badge badge-success">‚úì –û–ø–ª–∞—á–µ–Ω–æ</span>')
        return format_html('<span class="badge badge-warning">‚è≥ –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ</span>')
    get_payment_status.short_description = '–û–ø–ª–∞—Ç–∞'
    
    def get_total_display(self, obj):
        """–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞"""
        return format_html('<strong>{:.2f} ‚Ç¥</strong>', obj.total)
    get_total_display.short_description = '–°—É–º–∞'
    
    def get_customer_info(self, obj):
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞"""
        if obj.user:
            return format_html(
                '<strong>{}</strong><br>üìß {}<br>üìû {}<br>üî• –û–ø—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç',
                obj.get_customer_name(),
                obj.email,
                obj.phone
            )
        return format_html(
            '<strong>{}</strong><br>üìß {}<br>üìû {}<br>üë§ –ì—ñ—Å—Ç—å',
            obj.get_customer_name(),
            obj.email,
            obj.phone
        )
    get_customer_info.short_description = "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞"
    
    def get_items_list(self, obj):
        """–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ"""
        items = obj.items.all()
        if not items:
            return "–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤"
        
        html = '<table style="width:100%; border-collapse: collapse;">'
        html += '<tr style="background: #f7fafc;"><th style="padding: 8px; text-align: left;">–¢–æ–≤–∞—Ä</th><th style="padding: 8px;">–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th><th style="padding: 8px;">–¶—ñ–Ω–∞</th><th style="padding: 8px;">–°—É–º–∞</th></tr>'
        
        for item in items:
            html += f'''
                <tr style="border-bottom: 1px solid #e2e8f0;">
                    <td style="padding: 8px;">{item.product.name}</td>
                    <td style="padding: 8px; text-align: center;">{item.quantity} —à—Ç</td>
                    <td style="padding: 8px; text-align: right;">{item.price} ‚Ç¥</td>
                    <td style="padding: 8px; text-align: right;"><strong>{item.get_cost()} ‚Ç¥</strong></td>
                </tr>
            '''
        
        html += f'''
            <tr style="background: #f7fafc; font-weight: bold;">
                <td colspan="3" style="padding: 8px; text-align: right;">–†–∞–∑–æ–º:</td>
                <td style="padding: 8px; text-align: right;">{obj.subtotal} ‚Ç¥</td>
            </tr>
        '''
        
        if obj.delivery_cost > 0:
            html += f'''
                <tr>
                    <td colspan="3" style="padding: 8px; text-align: right;">–î–æ—Å—Ç–∞–≤–∫–∞:</td>
                    <td style="padding: 8px; text-align: right;">{obj.delivery_cost} ‚Ç¥</td>
                </tr>
            '''
        
        if obj.discount > 0:
            html += f'''
                <tr style="color: #f56565;">
                    <td colspan="3" style="padding: 8px; text-align: right;">–ó–Ω–∏–∂–∫–∞:</td>
                    <td style="padding: 8px; text-align: right;">-{obj.discount} ‚Ç¥</td>
                </tr>
            '''
        
        html += f'''
            <tr style="background: #ebf8ff; font-weight: bold; font-size: 16px;">
                <td colspan="3" style="padding: 8px; text-align: right;">–í—Å—å–æ–≥–æ –¥–æ —Å–ø–ª–∞—Ç–∏:</td>
                <td style="padding: 8px; text-align: right; color: #4299e1;">{obj.total} ‚Ç¥</td>
            </tr>
        '''
        
        html += '</table>'
        return format_html(html)
    get_items_list.short_description = "–¢–æ–≤–∞—Ä–∏ –≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ"
    
    def get_total_cost(self, obj):
        """–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑ –¥–æ—Å—Ç–∞–≤–∫–æ—é"""
        return format_html(
            '<strong style="color: green;">{:.2f} –≥—Ä–Ω</strong>',
            obj.get_total_cost()
        )
    get_total_cost.short_description = "–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å"
    
    def mark_as_confirmed(self, request, queryset):
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        updated = queryset.update(status='confirmed')
        self.message_user(request, f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ {updated} –∑–∞–º–æ–≤–ª–µ–Ω—å")
    
    mark_as_confirmed.short_description = "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
    
    def mark_as_shipped(self, request, queryset):
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        updated = queryset.update(status='shipped')
        self.message_user(request, f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {updated} –∑–∞–º–æ–≤–ª–µ–Ω—å")
    
    mark_as_shipped.short_description = "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
    
    def mark_as_delivered(self, request, queryset):
        """–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        updated = queryset.update(status='delivered')
        self.message_user(request, f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {updated} –∑–∞–º–æ–≤–ª–µ–Ω—å")
    
    mark_as_delivered.short_description = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
    
    class Media:
        css = {
            'all': ('admin/css/custom_admin.css',)
        }
        js = ('admin/js/custom_admin.js',)


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –∞–¥–º—ñ–Ω—Ü—ñ
Order._meta.verbose_name = "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"
Order._meta.verbose_name_plural = "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"

"""
–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è core –¥–æ–¥–∞—Ç–∫—É - –±–∞–Ω–µ—Ä–∏ —Ç–∞ —Å—Ç–∞—Ç—Ç—ñ
"""
from django.contrib import admin
from django.utils.html import format_html, strip_tags
from django.utils.safestring import mark_safe
from django.db import models
from ckeditor.widgets import CKEditorWidget
from .models import Banner
from apps.blog.models import Article


@admin.register(Banner)
class BannerAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –±–∞–Ω–µ—Ä—ñ–≤"""
    
    list_display = [
        'title', 
        'desktop_preview', 
        'mobile_preview', 
        'is_active', 
        'has_link',
        'order', 
        'created_at'
    ]
    
    list_filter = [
        'is_active', 
        'created_at'
    ]
    
    search_fields = [
        'title', 
        'alt_text', 
        'link_url'
    ]
    
    list_editable = [
        'is_active', 
        'order'
    ]
    
    readonly_fields = [
        'created_at', 
        'updated_at',
        'desktop_preview_large',
        'mobile_preview_large'
    ]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('title', 'alt_text', 'is_active', 'order')
        }),
        ('–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è', {
            'fields': (
                ('desktop_image', 'desktop_preview_large'),
                ('mobile_image', 'mobile_preview_large'),
            ),
            'description': mark_safe("""
                <div class="banner-image-info">
                    <h4>üìê –†–æ–∑–º—ñ—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å:</h4>
                    <ul>
                        <li><strong>–î–µ—Å–∫—Ç–æ–ø:</strong> 1200√ó400 –ø—ñ–∫—Å–µ–ª—ñ–≤ (—Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è 3:1)</li>
                        <li><strong>–ú–æ–±—ñ–ª—å–Ω–∏–π:</strong> 375√ó280 –ø—ñ–∫—Å–µ–ª—ñ–≤ (—Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è 1.34:1)</li>
                    </ul>
                    <p class="image-formats-note">–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: JPG, PNG, WebP</p>
                </div>
            """)
        }),
        ('–ü–æ—Å–∏–ª–∞–Ω–Ω—è', {
            'fields': ('link_url',),
            'description': 'URL –Ω–∞ —è–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –±–∞–Ω–µ—Ä (–Ω–µ–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ)'
        }),
        ('–°–∏—Å—Ç–µ–º–Ω—ñ –¥–∞–Ω—ñ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        })
    )
    
    def desktop_preview(self, obj):
        """–ü—Ä–µ–≤—å—é –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Å–ø–∏—Å–∫—É"""
        if obj.desktop_image:
            return format_html(
                '<img src="{}" alt="{}" class="admin-preview-desktop" />',
                obj.desktop_image.url,
                obj.alt_text
            )
        return "–ù–µ–º–∞—î"
    desktop_preview.short_description = "–ü—Ä–µ–≤—å—é –¥–µ—Å–∫—Ç–æ–ø"
    
    def mobile_preview(self, obj):
        """–ü—Ä–µ–≤—å—é –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Å–ø–∏—Å–∫—É"""
        if obj.mobile_image:
            return format_html(
                '<img src="{}" alt="{}" class="admin-preview-mobile" />',
                obj.mobile_image.url,
                obj.alt_text
            )
        return "–ù–µ–º–∞—î"
    mobile_preview.short_description = "–ü—Ä–µ–≤—å—é –º–æ–±—ñ–ª—å–Ω–∏–π"
    
    def desktop_preview_large(self, obj):
        """–í–µ–ª–∏–∫–µ –ø—Ä–µ–≤—å—é –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if obj.desktop_image:
            return format_html(
                '''
                <div class="admin-preview-large">
                    <img src="{}" alt="{}" class="admin-preview-large-desktop" />
                    <p class="admin-preview-caption">–î–µ—Å–∫—Ç–æ–ø –≤–µ—Ä—Å—ñ—è</p>
                </div>
                ''',
                obj.desktop_image.url,
                obj.alt_text
            )
        return "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ"
    desktop_preview_large.short_description = "–ü—Ä–µ–≤—å—é –¥–µ—Å–∫—Ç–æ–ø"
    
    def mobile_preview_large(self, obj):
        """–í–µ–ª–∏–∫–µ –ø—Ä–µ–≤—å—é –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if obj.mobile_image:
            return format_html(
                '''
                <div class="admin-preview-large">
                    <img src="{}" alt="{}" class="admin-preview-large-mobile" />
                    <p class="admin-preview-caption">–ú–æ–±—ñ–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è</p>
                </div>
                ''',
                obj.mobile_image.url,
                obj.alt_text
            )
        return "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ"
    mobile_preview_large.short_description = "–ü—Ä–µ–≤—å—é –º–æ–±—ñ–ª—å–Ω–∏–π"
    
    def has_link(self, obj):
        """–ß–∏ —î –ø–æ—Å–∏–ª–∞–Ω–Ω—è"""
        if obj.link_url:
            return format_html(
                '<span class="admin-has-link">‚úì –Ñ</span>'
            )
        return format_html(
            '<span class="admin-no-link">–ù–µ–º–∞—î</span>'
        )
    has_link.short_description = "–ü–æ—Å–∏–ª–∞–Ω–Ω—è"
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤"""
        return super().get_queryset(request).select_related()
        
    class Media:
        css = {
            'all': ('admin/css/custom_admin.css',)
        }
        js = ('admin/js/custom_admin.js',)


@admin.register(Article)
class ArticleAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–µ–π"""
    
    list_display = [
        'title', 'get_image_preview', 'created_at', 'get_excerpt_preview'
    ]
    list_filter = ['is_published', 'created_at']
    search_fields = ['title', 'content', 'excerpt']
    prepopulated_fields = {'slug': ('title',)}
    date_hierarchy = 'created_at'
    ordering = ['-created_at']
    save_on_top = True
    list_per_page = 50
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('title', 'slug', 'excerpt', 'image')
        }),
        ('–ö–æ–Ω—Ç–µ–Ω—Ç', {
            'fields': ('content',),
            'classes': ('wide',)
        }),
        ('–ó–≤\'—è–∑–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏', {
            'fields': ('related_products',),
            'description': '–û–±–µ—Ä—ñ—Ç—å –¥–æ 5 —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –∫—ñ–Ω—Ü—ñ —Å—Ç–∞—Ç—Ç—ñ'
        }),
        ('–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è', {
            'fields': ('is_published',)
        }),
        ('SEO', {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('collapse',)
        }),
    )
    
    filter_horizontal = ['related_products']
    
    formfield_overrides = {
        models.TextField: {'widget': CKEditorWidget()},
    }
    
    actions = ['publish_articles', 'unpublish_articles', 'duplicate_articles']
    
    def get_image_preview(self, obj):
        """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if obj.image:
            return format_html(
                '<img src="{}" class="admin-thumbnail-small" />',
                obj.image.url
            )
        return "üì∑ –ù–µ–º–∞—î"
    get_image_preview.short_description = "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
    
    def get_excerpt_preview(self, obj):
        """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –æ–ø–∏—Å—É"""
        if obj.excerpt:
            clean_text = strip_tags(obj.excerpt)
            return clean_text[:50] + "..." if len(clean_text) > 50 else clean_text
        return "–ù–µ–º–∞—î –æ–ø–∏—Å—É"
    get_excerpt_preview.short_description = "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å"
    
    def publish_articles(self, request, queryset):
        """–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—ñ"""
        updated = queryset.update(is_published=True)
        self.message_user(request, f"–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ {updated} —Å—Ç–∞—Ç–µ–π")
    publish_articles.short_description = "–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ"
    
    def unpublish_articles(self, request, queryset):
        """–°—Ö–æ–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—ñ"""
        updated = queryset.update(is_published=False)
        self.message_user(request, f"–°—Ö–æ–≤–∞–Ω–æ {updated} —Å—Ç–∞—Ç–µ–π")
    unpublish_articles.short_description = "–°—Ö–æ–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ"
    
    def duplicate_articles(self, request, queryset):
        """–î—É–±–ª—é–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—ñ"""
        duplicated = 0
        for article in queryset:
            article.pk = None
            article.title = f"{article.title} (–∫–æ–ø—ñ—è)"
            article.slug = f"{article.slug}-copy"
            article.is_published = False
            article.save()
            duplicated += 1
        self.message_user(request, f"–ü—Ä–æ–¥—É–±–ª—å–æ–≤–∞–Ω–æ {duplicated} —Å—Ç–∞—Ç–µ–π")
    duplicate_articles.short_description = "–î—É–±–ª—é–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ"
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤"""
        return super().get_queryset(request).prefetch_related('related_products')
    
    class Media:
        css = {
            'all': ('admin/css/custom_admin.css',)
        }
        js = ('admin/js/custom_admin.js',)


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –≤ –∞–¥–º—ñ–Ω—Ü—ñ
Banner._meta.verbose_name = "–ë–∞–Ω–µ—Ä"
Banner._meta.verbose_name_plural = "üì∏ –ë–∞–Ω–µ—Ä–∏"

Article._meta.verbose_name = "–°—Ç–∞—Ç—Ç—è"
Article._meta.verbose_name_plural = "üìù –°—Ç–∞—Ç—Ç—ñ"
Article._meta.app_label = "core"

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
admin.site.site_header = "Beauty Shop –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è"
admin.site.site_title = "Beauty Shop Admin"
admin.site.index_title = "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"

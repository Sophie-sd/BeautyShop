from django.contrib import admin
from django.utils.html import format_html
from .models import (
    Category, Product, ProductImage, ProductAttribute, 
    NewProduct, PromotionProduct, ProductTag,
    Brand, ProductGroup, ProductPurpose
)
from .forms import ProductAdminForm


class ProductImageInline(admin.TabularInline):
    model = ProductImage
    extra = 1
    fields = ['get_image_preview', 'image', 'alt_text', 'is_main', 'sort_order']
    readonly_fields = ['get_image_preview']
    classes = ['collapse']
    verbose_name = '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É'
    verbose_name_plural = 'üì∑ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É (–ø–µ—Ä—à–µ –±—É–¥–µ –≥–æ–ª–æ–≤–Ω–∏–º)'
    
    def get_image_preview(self, obj):
        """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if obj.image:
            return format_html(
                '<img src="{}" width="100" height="100" style="object-fit: cover; border-radius: 4px; border: 1px solid #ddd;" />',
                obj.image.url
            )
        return "–ù–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
    get_image_preview.short_description = '–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥'


class ProductAttributeInline(admin.TabularInline):
    model = ProductAttribute
    extra = 1
    fields = ['name', 'value', 'sort_order']
    classes = ['collapse']
    verbose_name = '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞'
    verbose_name_plural = 'üìù –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä—É (–æ–±\'—î–º, –±—Ä–µ–Ω–¥, —Ç–∏–ø —Ç–æ—â–æ)'


@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    
    list_display = ['get_category_image', 'name', 'parent', 'get_products_count', 'is_active', 'sort_order']
    list_display_links = ['get_category_image', 'name']
    list_filter = ['is_active', 'parent']
    search_fields = ['name', 'description']
    prepopulated_fields = {'slug': ('name',)}
    list_editable = ['is_active', 'sort_order']
    ordering = ['sort_order', 'name']
    save_on_top = True
    
    fieldsets = (
        ('üìÇ –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('name', 'slug', 'parent', 'image', 'description')
        }),
        ('‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': (('is_active', 'sort_order'),)
        }),
        ('üîç SEO (–Ω–µ–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ)', {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('collapse',)
        }),
    )
    
    def get_category_image(self, obj):
        """–ú—ñ–Ω—ñ–∞—Ç—é—Ä–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        if obj.image:
            return format_html(
                '<img src="{}" width="50" height="50" style="object-fit: cover; border-radius: 4px;" />',
                obj.image.url
            )
        return format_html('<div style="width: 50px; height: 50px; background: #f0f0f0; display: flex; align-items: center; justify-content: center; border-radius: 4px;">üìÇ</div>')
    get_category_image.short_description = '–§–æ—Ç–æ'
    
    def get_products_count(self, obj):
        """–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        count = obj.product_set.filter(is_active=True).count()
        return format_html('<span style="font-weight: bold;">{}</span>', count)
    get_products_count.short_description = '–¢–æ–≤–∞—Ä—ñ–≤'
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤"""
        qs = super().get_queryset(request)
        return qs.select_related('parent')


@admin.register(ProductTag)
class ProductTagAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤"""
    
    list_display = ['name', 'slug', 'is_active']
    list_editable = ['is_active']
    search_fields = ['name']
    prepopulated_fields = {'slug': ('name',)}
    ordering = ['name']


@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤"""
    
    form = ProductAdminForm
    
    list_display = [
        'get_product_image', 'name', 'category', 'sku', 
        'get_retail_price_display', 'get_wholesale_price_display',
        'stock', 'get_status_display', 'is_sale', 'is_top', 'is_new'
    ]
    list_display_links = ['get_product_image', 'name']
    list_filter = [
        'is_active',
        'category',
        'is_sale',
        'is_top',
        'is_new',
        'is_featured',
        'created_at',
        'updated_at'
    ]
    search_fields = ['name', 'sku', 'description']
    prepopulated_fields = {'slug': ('name',)}
    list_editable = ['is_sale', 'is_top', 'is_new']
    ordering = ['sort_order', '-created_at']
    date_hierarchy = 'created_at'
    list_per_page = 50
    save_on_top = True
    
    # –î–æ–¥–∞—î–º–æ autocomplete –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –≤ —ñ–Ω—à–∏—Ö –∞–¥–º—ñ–Ω–∫–∞—Ö
    autocomplete_fields = []
    
    inlines = [ProductImageInline, ProductAttributeInline]
    
    fieldsets = (
        ('üìã –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': (
                'name',
                'slug',
                'category',
                'sku',
                'description'
            ),
            'description': '–ù–∞–∑–≤–∞, –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–∞ –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É'
        }),
        ('üí∞ –¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è', {
            'fields': (
                ('retail_price', 'wholesale_price'),
                ('is_sale', 'sale_price'),
                ('price_3_qty', 'price_5_qty'),
            ),
            'description': '<strong>–†–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞</strong> ‚Äî –¥–ª—è –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤<br>'
                          '<strong>–û–ø—Ç–æ–≤–∞ —Ü—ñ–Ω–∞</strong> ‚Äî –¥–ª—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –æ–ø—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤<br>'
                          '<strong>–ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞</strong> ‚Äî —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ "–ê–∫—Ü—ñ–π–Ω–∏–π —Ç–æ–≤–∞—Ä"<br>'
                          '<strong>–¶—ñ–Ω–∞ –≤—ñ–¥ 3/5 —à—Ç</strong> ‚Äî –∑–Ω–∏–∂–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ –≤—ñ–¥ 3 –∞–±–æ 5 —à—Ç—É–∫'
        }),
        ('üì¶ –°–∫–ª–∞–¥ —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å', {
            'fields': (
                ('stock', 'is_active'),
                'is_featured'
            ),
            'description': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ —Ç–∞ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ'
        }),
        ('üè∑Ô∏è –ü–æ–∑–Ω–∞—á–∫–∏ —Ç–æ–≤–∞—Ä—É', {
            'fields': (
                ('is_top', 'is_new'),
                'sort_order'
            ),
            'description': '<strong>–¢–û–ü</strong> ‚Äî —Ç–æ–ø–æ–≤–∏–π/–ø–æ–ø—É–ª—è—Ä–Ω–∏–π —Ç–æ–≤–∞—Ä<br>'
                          '<strong>–ù–æ–≤–∏–Ω–∫–∞</strong> ‚Äî –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä<br>'
                          '<strong>–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</strong> ‚Äî —á–∏–º –º–µ–Ω—à–µ —á–∏—Å–ª–æ, —Ç–∏–º –≤–∏—â–µ —É —Å–ø–∏—Å–∫—É'
        }),
        ('üîç SEO –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–Ω–µ–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ)', {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('collapse',),
            'description': '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫–æ–≤–∏—Ö —Å–∏—Å—Ç–µ–º. –Ø–∫—â–æ –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –Ω–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É'
        }),
        ('üìÖ –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',),
        }),
    )
    
    readonly_fields = ['created_at', 'updated_at']
    
    actions = [
        'activate_products', 
        'deactivate_products',
        'mark_as_sale',
        'unmark_as_sale',
        'mark_as_top',
        'mark_as_new'
    ]
    
    def get_product_image(self, obj):
        """–ú—ñ–Ω—ñ–∞—Ç—é—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É"""
        main_image = obj.images.filter(is_main=True).first() or obj.images.first()
        if main_image:
            return format_html(
                '<img src="{}" width="50" height="50" style="object-fit: cover; border-radius: 4px;" />',
                main_image.image.url
            )
        return format_html('<div style="width: 50px; height: 50px; background: #f0f0f0; display: flex; align-items: center; justify-content: center; border-radius: 4px;">üì¶</div>')
    get_product_image.short_description = '–§–æ—Ç–æ'
    
    def get_retail_price_display(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–¥—Ä—ñ–±–Ω–æ—ó —Ü—ñ–Ω–∏"""
        if obj.is_sale and obj.sale_price:
            return format_html(
                '<span style="text-decoration: line-through; color: #999;">{} ‚Ç¥</span><br>'
                '<strong style="color: #e91e63;">{} ‚Ç¥</strong>',
                obj.retail_price, obj.sale_price
            )
        return f"{obj.retail_price} ‚Ç¥"
    get_retail_price_display.short_description = '–†–æ–∑–¥—Ä—ñ–±'
    
    def get_wholesale_price_display(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–ø—Ç–æ–≤–æ—ó —Ü—ñ–Ω–∏"""
        if obj.wholesale_price:
            return f"{obj.wholesale_price} ‚Ç¥"
        return "‚Äî"
    get_wholesale_price_display.short_description = '–û–ø—Ç'
    
    def get_status_display(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–æ–≤–∞—Ä—É"""
        if obj.is_active:
            if obj.stock > 0:
                return format_html('<span style="color: green;">‚óè –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ</span>')
            else:
                return format_html('<span style="color: orange;">‚ö† –ù–µ–º–∞—î –Ω–∞ —Å–∫–ª–∞–¥—ñ</span>')
        return format_html('<span style="color: red;">‚úï –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π</span>')
    get_status_display.short_description = '–°—Ç–∞—Ç—É—Å'
    
    # –î—ñ—ó (Actions)
    def activate_products(self, request, queryset):
        """–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏"""
        updated = queryset.update(is_active=True)
        self.message_user(request, f"–ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {updated} —Ç–æ–≤–∞—Ä—ñ–≤")
    activate_products.short_description = "‚úì –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏"
    
    def deactivate_products(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏"""
        updated = queryset.update(is_active=False)
        self.message_user(request, f"–î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {updated} —Ç–æ–≤–∞—Ä—ñ–≤")
    deactivate_products.short_description = "‚úï –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏"
    
    def mark_as_sale(self, request, queryset):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –∞–∫—Ü—ñ–π–Ω—ñ"""
        updated = queryset.update(is_sale=True)
        self.message_user(request, f"–ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –∞–∫—Ü—ñ–π–Ω—ñ: {updated} —Ç–æ–≤–∞—Ä—ñ–≤")
    mark_as_sale.short_description = "üî• –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ê–ö–¶–Ü–ô–ù–Ü"
    
    def unmark_as_sale(self, request, queryset):
        """–ó–Ω—è—Ç–∏ –ø–æ–∑–Ω–∞—á–∫—É –∞–∫—Ü—ñ–π–Ω–∏–π"""
        updated = queryset.update(is_sale=False)
        self.message_user(request, f"–ó–Ω—è—Ç–æ –ø–æ–∑–Ω–∞—á–∫—É –∞–∫—Ü—ñ–π–Ω–∏–π: {updated} —Ç–æ–≤–∞—Ä—ñ–≤")
    unmark_as_sale.short_description = "–ó–Ω—è—Ç–∏ –ø–æ–∑–Ω–∞—á–∫—É –ê–ö–¶–Ü–ô–ù–ò–ô"
    
    def mark_as_top(self, request, queryset):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –¢–û–ü"""
        updated = queryset.update(is_top=True)
        self.message_user(request, f"–ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –¢–û–ü: {updated} —Ç–æ–≤–∞—Ä—ñ–≤")
    mark_as_top.short_description = "‚≠ê –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –¢–û–ü"
    
    def mark_as_new(self, request, queryset):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –Ω–æ–≤–∏–Ω–∫–∏"""
        updated = queryset.update(is_new=True)
        self.message_user(request, f"–ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –Ω–æ–≤–∏–Ω–∫–∏: {updated} —Ç–æ–≤–∞—Ä—ñ–≤")
    mark_as_new.short_description = "‚ú® –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ù–û–í–ò–ù–ö–ò"
    
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞–¥–∞—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
        if db_field.name == "category":
            kwargs["queryset"] = Category.objects.filter(is_active=True).order_by('sort_order', 'name')
        return super().formfield_for_foreignkey(db_field, request, **kwargs)


@admin.register(NewProduct)
class NewProductAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–æ–∫ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ"""
    
    list_display = ['product', 'get_is_new_status', 'sort_order', 'is_active', 'created_at']
    list_filter = ['is_active', 'created_at']
    search_fields = ['product__name', 'product__sku']
    list_editable = ['sort_order', 'is_active']
    ordering = ['sort_order', '-created_at']
    autocomplete_fields = ['product']
    
    fieldsets = (
        (None, {
            'fields': ('product', 'sort_order', 'is_active'),
            'description': '‚ú® –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä –≤ –±–ª–æ–∫ "–ù–æ–≤–∏–Ω–∫–∏" –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ. –¢–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º–∞—î —Å—Ç–∞—Ç—É—Å "–ù–æ–≤–∏–Ω–∫–∞".'
        }),
    )
    
    def get_is_new_status(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É is_new —Ç–æ–≤–∞—Ä—É"""
        if obj.product.is_new:
            return format_html('<span style="color: green;">‚úÖ –ù–æ–≤–∏–Ω–∫–∞</span>')
        return format_html('<span style="color: red;">‚ùå –ù–µ –Ω–æ–≤–∏–Ω–∫–∞</span>')
    get_is_new_status.short_description = '–°—Ç–∞—Ç—É—Å NEW'
    
    def save_model(self, request, obj, form, change):
        """–ü—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ is_new=True –¥–ª—è —Ç–æ–≤–∞—Ä—É"""
        super().save_model(request, obj, form, change)
        if not obj.product.is_new:
            obj.product.is_new = True
            obj.product.save(update_fields=['is_new'])
        self.message_user(request, f'‚úÖ –¢–æ–≤–∞—Ä "{obj.product.name}" –¥–æ–¥–∞–Ω–æ –≤ –Ω–æ–≤–∏–Ω–∫–∏ —ñ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–º NEW')
    
    def delete_model(self, request, obj):
        """–ü—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–Ω—ñ–º–∞—î–º–æ is_new –∑ —Ç–æ–≤–∞—Ä—É"""
        product_name = obj.product.name
        obj.product.is_new = False
        obj.product.save(update_fields=['is_new'])
        super().delete_model(request, obj)
        self.message_user(request, f'‚ùå –¢–æ–≤–∞—Ä "{product_name}" –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –Ω–æ–≤–∏–Ω–æ–∫ —ñ –∑–Ω—è—Ç–æ —Å—Ç–∞—Ç—É—Å NEW')
    
    def delete_queryset(self, request, queryset):
        """–ü—Ä–∏ –º–∞—Å–æ–≤–æ–º—É –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–Ω—ñ–º–∞—î–º–æ is_new –∑ —Ç–æ–≤–∞—Ä—ñ–≤"""
        products = [obj.product for obj in queryset]
        for product in products:
            product.is_new = False
            product.save(update_fields=['is_new'])
        count = len(products)
        super().delete_queryset(request, queryset)
        self.message_user(request, f'‚ùå –ó {count} —Ç–æ–≤–∞—Ä—ñ–≤ –∑–Ω—è—Ç–æ —Å—Ç–∞—Ç—É—Å NEW')


@admin.register(PromotionProduct)
class PromotionProductAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –∞–∫—Ü—ñ–π–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ"""
    
    list_display = [
        'product', 
        'get_original_price_display', 
        'discount_price', 
        'get_discount_display',
        'sort_order', 
        'is_active', 
        'updated_at'
    ]
    list_filter = ['is_active', 'created_at', 'updated_at']
    search_fields = ['product__name', 'product__sku']
    list_editable = ['discount_price', 'sort_order', 'is_active']
    ordering = ['sort_order', '-created_at']
    readonly_fields = ['created_at', 'updated_at', 'get_discount_percentage']
    
    fieldsets = (
        ('–¢–æ–≤–∞—Ä', {
            'fields': ('product',)
        }),
        ('–¶—ñ–Ω–∏', {
            'fields': (
                'discount_price',
                'get_discount_percentage'
            ),
            'description': '–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –±—É–¥–µ –ø–µ—Ä–µ–∫—Ä–µ—Å–ª–µ–Ω–∞ –Ω–∞ —Å–∞–π—Ç—ñ, –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏–º–µ—Ç—å—Å—è –∞–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞'
        }),
        ('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': ('sort_order', 'is_active')
        }),
        ('–î–∞—Ç–∏', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def get_original_price_display(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏"""
        return f"{obj.get_original_price()} ‚Ç¥"
    get_original_price_display.short_description = '–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞'
    
    def get_discount_display(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–Ω–∏–∂–∫–∏ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö"""
        percentage = obj.get_discount_percentage()
        return f"-{percentage}%"
    get_discount_display.short_description = '–ó–Ω–∏–∂–∫–∞'


# ============================================
#              –ù–û–í–Ü –ú–û–î–ï–õ–Ü –§–Ü–õ–¨–¢–†–Ü–í          
# ============================================

# –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤
@admin.register(Brand)
class BrandAdmin(admin.ModelAdmin):
    list_display = ('name', 'is_active', 'products_count', 'sort_order', 'created_at')
    list_filter = ('is_active', 'created_at')
    search_fields = ('name', 'description')
    prepopulated_fields = {'slug': ('name',)}
    readonly_fields = ('created_at',)
    list_editable = ('is_active', 'sort_order')
    ordering = ('sort_order', 'name')
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('name', 'slug', 'logo', 'description')
        }),
        ('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': ('is_active', 'sort_order')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )
    
    def products_count(self, obj):
        return obj.product_set.count()
    products_count.short_description = '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤'


# –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø —Ç–æ–≤–∞—Ä—ñ–≤
@admin.register(ProductGroup)
class ProductGroupAdmin(admin.ModelAdmin):
    list_display = ('name', 'is_active', 'products_count', 'sort_order', 'created_at')
    list_filter = ('is_active', 'created_at')
    search_fields = ('name', 'description')
    prepopulated_fields = {'slug': ('name',)}
    readonly_fields = ('created_at',)
    list_editable = ('is_active', 'sort_order')
    ordering = ('sort_order', 'name')
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('name', 'slug', 'description')
        }),
        ('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': ('is_active', 'sort_order')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )
    
    def products_count(self, obj):
        return obj.product_set.count()
    products_count.short_description = '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤'


# –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å
@admin.register(ProductPurpose)
class ProductPurposeAdmin(admin.ModelAdmin):
    list_display = ('name', 'is_active', 'products_count', 'sort_order', 'created_at')
    list_filter = ('is_active', 'created_at')
    search_fields = ('name', 'description')
    prepopulated_fields = {'slug': ('name',)}
    readonly_fields = ('created_at',)
    list_editable = ('is_active', 'sort_order')
    ordering = ('sort_order', 'name')
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('name', 'slug', 'description')
        }),
        ('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': ('is_active', 'sort_order')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )
    
    def products_count(self, obj):
        return obj.product_set.count()
    products_count.short_description = '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤'
    
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞–¥–∞—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä—ñ–≤"""
        if db_field.name == "product":
            kwargs["queryset"] = Product.objects.filter(is_active=True).order_by('name')
        return super().formfield_for_foreignkey(db_field, request, **kwargs)

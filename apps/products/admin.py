"""
–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å —Ç–æ–≤–∞—Ä—ñ–≤ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º
–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞: —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏, —Ü—ñ–Ω–∞–º–∏, –∞–∫—Ü—ñ—è–º–∏, —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
"""
from django.contrib import admin
from django.utils.html import format_html
from django.db import models
from django.utils import timezone
from django.contrib import messages
from django.urls import reverse
from django.utils.safestring import mark_safe
from decimal import Decimal

from .models import (
    Category, Product, ProductImage, ProductAttribute, 
    NewProduct, PromotionProduct, ProductTag,
    Brand, ProductGroup, ProductPurpose,
    CategoryFilterConfig, ProductChangeLog, SalePromotion
)
from .forms import ProductAdminForm


# ============================================
#              INLINE –ê–î–ú–Ü–ù–Ü–°–¢–†–£–í–ê–ù–ù–Ø
# ============================================

class ProductImageInline(admin.TabularInline):
    model = ProductImage
    extra = 1
    fields = ['get_image_preview', 'image', 'alt_text', 'is_main', 'sort_order']
    readonly_fields = ['get_image_preview']
    classes = ['collapse']
    verbose_name = '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É'
    verbose_name_plural = 'üì∑ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É (–ø–µ—Ä—à–µ –±—É–¥–µ –≥–æ–ª–æ–≤–Ω–∏–º)'
    
    def get_image_preview(self, obj):
        """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if obj.image:
            return format_html(
                '<img src="{}" class="admin-thumbnail" />',
                obj.image.url
            )
        return "–ù–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
    get_image_preview.short_description = '–ü—Ä–µ–≤—å—é'


class ProductAttributeInline(admin.TabularInline):
    model = ProductAttribute
    extra = 1
    fields = ['name', 'value', 'sort_order']
    classes = ['collapse']
    verbose_name = '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞'
    verbose_name_plural = 'üìù –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä—É (–æ–±\'—î–º, –±—Ä–µ–Ω–¥, —Ç–∏–ø —Ç–æ—â–æ)'


class CategoryFilterConfigInline(admin.StackedInline):
    """Inline –¥–ª—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    model = CategoryFilterConfig
    can_delete = False
    verbose_name = '–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤'
    verbose_name_plural = '‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É'
    
    fieldsets = (
        ('–Ø–∫—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó', {
            'fields': (
                ('show_brand_filter', 'show_group_filter'),
                ('show_purpose_filter', 'show_price_filter'),
                'show_availability_filter',
            ),
            'description': '–í–∫–∞–∂—ñ—Ç—å —è–∫—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ —Ç–æ–≤–∞—Ä—ñ–≤ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
        }),
    )


# ============================================
#              –ö–ê–¢–ï–ì–û–†–Ü–á
# ============================================

@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤"""
    
    list_display = ['get_category_image', 'name', 'parent', 'get_products_count', 'get_filter_config', 'is_active', 'sort_order']
    list_display_links = ['get_category_image', 'name']
    list_filter = ['is_active', 'parent']
    search_fields = ['name', 'description']
    prepopulated_fields = {'slug': ('name',)}
    list_editable = ['is_active', 'sort_order']
    ordering = ['sort_order', 'name']
    save_on_top = True
    
    inlines = [CategoryFilterConfigInline]
    
    fieldsets = (
        ('üìÇ –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('name', 'slug', 'parent', 'image', 'description')
        }),
        ('‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': (('is_active', 'sort_order'),)
        }),
        ('üîç SEO (–Ω–µ–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ)', {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('collapse',)
        }),
    )
    
    def get_category_image(self, obj):
        """–ú—ñ–Ω—ñ–∞—Ç—é—Ä–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        if obj.image:
            return format_html(
                '<img src="{}" class="admin-thumbnail-small" />',
                obj.image.url
            )
        return format_html('<div class="admin-icon-placeholder">üìÇ</div>')
    get_category_image.short_description = '–§–æ—Ç–æ'
    
    def get_products_count(self, obj):
        """–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        count = obj.product_set.filter(is_active=True).count()
        return format_html('<span class="badge badge-info">{}</span>', count)
    get_products_count.short_description = '–¢–æ–≤–∞—Ä—ñ–≤'
    
    def get_filter_config(self, obj):
        """–ü–æ–∫–∞–∑—É—î —è–∫—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ñ"""
        try:
            config = obj.filter_config
            filters = []
            if config.show_brand_filter:
                filters.append('–ë—Ä–µ–Ω–¥')
            if config.show_group_filter:
                filters.append('–ì—Ä—É–ø–∞')
            if config.show_purpose_filter:
                filters.append('–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è')
            if config.show_price_filter:
                filters.append('–¶—ñ–Ω–∞')
            
            if filters:
                return format_html('<span class="filter-tags">{}</span>', ', '.join(filters))
            return '‚Äî'
        except CategoryFilterConfig.DoesNotExist:
            return format_html('<span class="text-warning">–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ</span>')
    get_filter_config.short_description = '–ê–∫—Ç–∏–≤–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏'
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤"""
        qs = super().get_queryset(request)
        return qs.select_related('parent').prefetch_related('filter_config')
    
    def save_model(self, request, obj, form, change):
        """–ü—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î"""
        super().save_model(request, obj, form, change)
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        CategoryFilterConfig.objects.get_or_create(category=obj)


# ============================================
#              –¢–û–í–ê–†–ò (–ì–û–õ–û–í–ù–ò–ô –†–û–ó–î–Ü–õ)
# ============================================

@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º"""
    
    form = ProductAdminForm
    
    list_display = [
        'get_product_image', 'name', 'category', 'sku', 
        'get_price_display', 'get_sale_status',
        'stock', 'get_status_display', 'get_badges', 'updated_at'
    ]
    list_display_links = ['get_product_image', 'name']
    list_filter = [
        'is_active',
        'category',
        'is_sale',
        'is_top',
        'is_new',
        'is_featured',
        'created_at',
        'updated_at'
    ]
    search_fields = ['name', 'sku', 'description']
    prepopulated_fields = {'slug': ('name',)}
    list_editable = ['stock']
    ordering = ['sort_order', '-created_at']
    date_hierarchy = 'created_at'
    list_per_page = 50
    save_on_top = True
    
    # Autocomplete –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
    autocomplete_fields = []
    search_help_text = "–ü–æ—à—É–∫ –ø–æ –Ω–∞–∑–≤—ñ, –∞—Ä—Ç–∏–∫—É–ª—É –∞–±–æ –æ–ø–∏—Å—É —Ç–æ–≤–∞—Ä—É"
    
    inlines = [ProductImageInline, ProductAttributeInline]
    
    fieldsets = (
        ('üìã –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': (
                'name',
                'slug',
                'category',
                'sku',
                'description'
            ),
            'description': '–ù–∞–∑–≤–∞, –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–∞ –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É'
        }),
        ('üí∞ –¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è', {
            'fields': (
                ('retail_price', 'wholesale_price'),
                ('price_3_qty', 'price_5_qty'),
            ),
            'description': mark_safe('''
                <div class="pricing-help">
                    <strong>–ü—Ä–∞–≤–∏–ª–æ —Ü—ñ–Ω:</strong> 5+ ‚â§ 3+ ‚â§ –û–ø—Ç–æ–≤–∞ ‚â§ –ë–∞–∑–æ–≤–∞<br>
                    <strong>–†–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞</strong> ‚Äî –¥–ª—è –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö<br>
                    <strong>–û–ø—Ç–æ–≤–∞ —Ü—ñ–Ω–∞</strong> ‚Äî –¥–ª—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –æ–ø—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤<br>
                    <strong>–¶—ñ–Ω–∞ –≤—ñ–¥ 3/5 —à—Ç</strong> ‚Äî –∑–Ω–∏–∂–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ –≤—ñ–¥ 3 –∞–±–æ 5 —à—Ç—É–∫
                </div>
            ''')
        }),
        ('üî• –ê–∫—Ü—ñ–π–Ω–µ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è', {
            'fields': (
                'is_sale',
                'sale_price',
                ('sale_start_date', 'sale_end_date'),
            ),
            'classes': ('collapse',),
            'description': mark_safe('''
                <div class="sale-help">
                    <strong>–ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞</strong> –∑–∞–≤–∂–¥–∏ –º–∞—î –±—É—Ç–∏ –º–µ–Ω—à–æ—é –∑–∞ —Ä–æ–∑–¥—Ä—ñ–±–Ω—É<br>
                    –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –¥–∞—Ç–∏ - –∞–∫—Ü—ñ—è –ø–æ—Å—Ç—ñ–π–Ω–∞<br>
                    –ê–∫—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –Ω–∞ —Å–∞–π—Ç—ñ
                </div>
            ''')
        }),
        ('üì¶ –°–∫–ª–∞–¥ —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å', {
            'fields': (
                ('stock', 'is_active'),
                'is_featured'
            ),
            'description': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ —Ç–∞ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ'
        }),
        ('üè∑Ô∏è –ü–æ–∑–Ω–∞—á–∫–∏ —Ç–æ–≤–∞—Ä—É (–ë–µ–π–¥–∂—ñ)', {
            'fields': (
                ('is_top', 'is_new'),
                'sort_order'
            ),
            'description': mark_safe('''
                <strong>–•—ñ—Ç</strong> ‚Äî —Ç–æ–ø–æ–≤–∏–π/–ø–æ–ø—É–ª—è—Ä–Ω–∏–π —Ç–æ–≤–∞—Ä<br>
                <strong>–ù–æ–≤–∏–Ω–∫–∞</strong> ‚Äî –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä<br>
                <strong>–ê–∫—Ü—ñ—è</strong> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ is_sale=True
            ''')
        }),
        ('üîç SEO –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('collapse',),
        }),
        ('üìÖ –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',),
        }),
    )
    
    readonly_fields = ['created_at', 'updated_at']
    
    actions = [
        'activate_products', 
        'deactivate_products',
        'mark_as_sale',
        'unmark_as_sale',
        'mark_as_top',
        'mark_as_new',
        'set_sale_price_bulk',
        'clear_sale_prices',
        'export_to_csv',
    ]
    
    # ========== –ú–µ—Ç–æ–¥–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è ==========
    
    def get_product_image(self, obj):
        """–ú—ñ–Ω—ñ–∞—Ç—é—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É"""
        main_image = obj.images.filter(is_main=True).first() or obj.images.first()
        if main_image:
            return format_html(
                '<img src="{}" class="admin-thumbnail-small" />',
                main_image.image.url
            )
        return format_html('<div class="admin-icon-placeholder">üì¶</div>')
    get_product_image.short_description = '–§–æ—Ç–æ'
    
    def get_price_display(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ü—ñ–Ω"""
        prices = []
        prices.append(f"<strong>{obj.retail_price} ‚Ç¥</strong>")
        
        if obj.wholesale_price:
            prices.append(f"–û–ø—Ç: {obj.wholesale_price} ‚Ç¥")
        
        if obj.price_3_qty:
            prices.append(f"3+: {obj.price_3_qty} ‚Ç¥")
        
        if obj.price_5_qty:
            prices.append(f"5+: {obj.price_5_qty} ‚Ç¥")
        
        return format_html('<div class="price-stack">{}</div>', '<br>'.join(prices))
    get_price_display.short_description = '–¶—ñ–Ω–∏'
    
    def get_sale_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –∞–∫—Ü—ñ—ó"""
        if obj.is_sale and obj.sale_price:
            if obj.is_sale_active():
                discount = obj.get_discount_percentage()
                info = f'<span class="badge badge-sale">{obj.sale_price} ‚Ç¥ (-{discount}%)</span>'
                
                if obj.sale_end_date:
                    days_left = (obj.sale_end_date - timezone.now()).days
                    if days_left <= 3:
                        info += f'<br><span class="text-danger">‚è∞ {days_left} –¥–Ω.</span>'
                    else:
                        info += f'<br><span class="text-muted">{days_left} –¥–Ω.</span>'
                
                return format_html(info)
            else:
                return format_html('<span class="badge badge-inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω–∞</span>')
        return '‚Äî'
    get_sale_status.short_description = '–ê–∫—Ü—ñ—è'
    
    def get_status_display(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–æ–≤–∞—Ä—É"""
        if obj.is_active:
            if obj.stock > 0:
                return format_html('<span class="status-active">‚óè –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ</span>')
            else:
                return format_html('<span class="status-warning">‚ö† –ù–µ–º–∞—î –Ω–∞ —Å–∫–ª–∞–¥—ñ</span>')
        return format_html('<span class="status-inactive">‚úï –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π</span>')
    get_status_display.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def get_badges(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤"""
        stickers = obj.get_stickers()
        if not stickers:
            return '‚Äî'
        
        badges_html = []
        for sticker in stickers:
            badges_html.append(f'<span class="badge {sticker["class"]}">{sticker["text"]}</span>')
        
        return format_html(' '.join(badges_html))
    get_badges.short_description = '–ë–µ–π–¥–∂—ñ'
    
    # ========== –ú–∞—Å–æ–≤—ñ –¥—ñ—ó ==========
    
    def activate_products(self, request, queryset):
        """–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏"""
        updated = queryset.update(is_active=True)
        self.message_user(request, f"–ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    activate_products.short_description = "‚úì –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏"
    
    def deactivate_products(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏"""
        updated = queryset.update(is_active=False)
        self.message_user(request, f"–î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    deactivate_products.short_description = "‚úï –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏"
    
    def mark_as_sale(self, request, queryset):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –∞–∫—Ü—ñ–π–Ω—ñ"""
        count = 0
        for product in queryset:
            if product.sale_price:
                product.is_sale = True
                product.save(update_fields=['is_sale'])
                count += 1
        
        self.message_user(
            request, 
            f"–ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –∞–∫—Ü—ñ–π–Ω—ñ: {count} —Ç–æ–≤–∞—Ä—ñ–≤. –¢–æ–≤–∞—Ä–∏ –±–µ–∑ –≤–∫–∞–∑–∞–Ω–æ—ó –∞–∫—Ü—ñ–π–Ω–æ—ó —Ü—ñ–Ω–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ.",
            messages.WARNING if count < queryset.count() else messages.SUCCESS
        )
    mark_as_sale.short_description = "üî• –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ê–ö–¶–Ü–ô–ù–Ü"
    
    def unmark_as_sale(self, request, queryset):
        """–ó–Ω—è—Ç–∏ –ø–æ–∑–Ω–∞—á–∫—É –∞–∫—Ü—ñ–π–Ω–∏–π"""
        updated = queryset.update(is_sale=False)
        self.message_user(request, f"–ó–Ω—è—Ç–æ –ø–æ–∑–Ω–∞—á–∫—É –∞–∫—Ü—ñ–π–Ω–∏–π: {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    unmark_as_sale.short_description = "–ó–Ω—è—Ç–∏ –ø–æ–∑–Ω–∞—á–∫—É –ê–ö–¶–Ü–ô–ù–ò–ô"
    
    def mark_as_top(self, request, queryset):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –•–Ü–¢"""
        updated = queryset.update(is_top=True)
        self.message_user(request, f"–ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –•–Ü–¢: {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    mark_as_top.short_description = "‚≠ê –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –•–Ü–¢"
    
    def mark_as_new(self, request, queryset):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –Ω–æ–≤–∏–Ω–∫–∏"""
        updated = queryset.update(is_new=True)
        self.message_user(request, f"–ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –Ω–æ–≤–∏–Ω–∫–∏: {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    mark_as_new.short_description = "‚ú® –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ù–û–í–ò–ù–ö–ò"
    
    def clear_sale_prices(self, request, queryset):
        """–û—á–∏—Å—Ç–∏—Ç–∏ –∞–∫—Ü—ñ–π–Ω—ñ —Ü—ñ–Ω–∏"""
        queryset.update(
            is_sale=False,
            sale_price=None,
            sale_start_date=None,
            sale_end_date=None
        )
        self.message_user(request, f"–ê–∫—Ü—ñ–π–Ω—ñ —Ü—ñ–Ω–∏ –æ—á–∏—â–µ–Ω–æ –¥–ª—è {queryset.count()} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    clear_sale_prices.short_description = "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∞–∫—Ü—ñ–π–Ω—ñ —Ü—ñ–Ω–∏"
    
    def export_to_csv(self, request, queryset):
        """–ï–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ —É CSV"""
        import csv
        from django.http import HttpResponse
        
        response = HttpResponse(content_type='text/csv; charset=utf-8')
        response['Content-Disposition'] = 'attachment; filename="products_export.csv"'
        response.write('\ufeff')  # BOM –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∏—Ä–∏–ª–∏—Ü—ñ –≤ Excel
        
        writer = csv.writer(response)
        writer.writerow([
            'SKU', '–ù–∞–∑–≤–∞', '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–†–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞', '–û–ø—Ç–æ–≤–∞ —Ü—ñ–Ω–∞',
            '–ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', '–°—Ç–∞—Ç—É—Å'
        ])
        
        for product in queryset:
            writer.writerow([
                product.sku,
                product.name,
                product.category.name,
                product.retail_price,
                product.wholesale_price or '',
                product.sale_price or '',
                product.stock,
                '–ê–∫—Ç–∏–≤–Ω–∏–π' if product.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'
            ])
        
        self.message_user(request, f"–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {queryset.count()} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
        return response
    export_to_csv.short_description = "üìä –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤ CSV"
    
    # ========== –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è ==========
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º—ñ–∑—É—î–º–æ –∑–∞–ø–∏—Ç–∏"""
        qs = super().get_queryset(request)
        return qs.select_related('category').prefetch_related('images')
    
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞–¥–∞—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
        if db_field.name == "category":
            kwargs["queryset"] = Category.objects.filter(is_active=True).order_by('sort_order', 'name')
        return super().formfield_for_foreignkey(db_field, request, **kwargs)
    
    def save_model(self, request, obj, form, change):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–ª—ñ–≤"""
        if change:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ä–∏–π –æ–±'—î–∫—Ç
            try:
                old_obj = Product.objects.get(pk=obj.pk)
                
                # –í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î–º–æ –∑–º—ñ–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–ª—ñ–≤
                critical_fields = {
                    'retail_price': ('price', '–†–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞'),
                    'wholesale_price': ('price', '–û–ø—Ç–æ–≤–∞ —Ü—ñ–Ω–∞'),
                    'sale_price': ('sale', '–ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞'),
                    'is_active': ('visibility', '–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'),
                    'is_sale': ('sale', '–°—Ç–∞—Ç—É—Å –∞–∫—Ü—ñ—ó'),
                    'stock': ('stock', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ'),
                }
                
                for field_name, (change_type, display_name) in critical_fields.items():
                    old_value = getattr(old_obj, field_name)
                    new_value = getattr(obj, field_name)
                    
                    if old_value != new_value:
                        ProductChangeLog.objects.create(
                            product=obj,
                            user=request.user if request.user.is_authenticated else None,
                            field_name=display_name,
                            old_value=str(old_value),
                            new_value=str(new_value),
                            change_type=change_type
                        )
            except Product.DoesNotExist:
                pass
        
        super().save_model(request, obj, form, change)


# ============================================
#       –ë–†–ï–ù–î–ò, –ì–†–£–ü–ò, –ü–†–ò–ó–ù–ê–ß–ï–ù–ù–Ø
# ============================================

@admin.register(Brand)
class BrandAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤"""
    
    list_display = ('get_logo_preview', 'name', 'is_active', 'products_count', 'sort_order', 'created_at')
    list_filter = ('is_active', 'created_at')
    search_fields = ('name', 'description')
    prepopulated_fields = {'slug': ('name',)}
    readonly_fields = ('created_at', 'get_logo_preview_large')
    list_editable = ('is_active', 'sort_order')
    ordering = ('sort_order', 'name')
    save_on_top = True
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('name', 'slug', ('logo', 'get_logo_preview_large'), 'description')
        }),
        ('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': ('is_active', 'sort_order')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )
    
    def get_logo_preview(self, obj):
        if obj.logo:
            return format_html('<img src="{}" class="admin-thumbnail-small" />', obj.logo.url)
        return '‚Äî'
    get_logo_preview.short_description = '–õ–æ–≥–æ'
    
    def get_logo_preview_large(self, obj):
        if obj.logo:
            return format_html('<img src="{}" class="admin-thumbnail" />', obj.logo.url)
        return '–õ–æ–≥–æ—Ç–∏–ø –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ'
    get_logo_preview_large.short_description = '–ü—Ä–µ–≤—å—é –ª–æ–≥–æ—Ç–∏–ø—É'
    
    def products_count(self, obj):
        return obj.product_set.count()
    products_count.short_description = '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤'


@admin.register(ProductGroup)
class ProductGroupAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø —Ç–æ–≤–∞—Ä—ñ–≤"""
    
    list_display = ('name', 'is_active', 'products_count', 'sort_order', 'created_at')
    list_filter = ('is_active', 'created_at')
    search_fields = ('name', 'description')
    prepopulated_fields = {'slug': ('name',)}
    readonly_fields = ('created_at',)
    list_editable = ('is_active', 'sort_order')
    ordering = ('sort_order', 'name')
    save_on_top = True
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('name', 'slug', 'description')
        }),
        ('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': ('is_active', 'sort_order')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )
    
    def products_count(self, obj):
        return obj.product_set.count()
    products_count.short_description = '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤'


@admin.register(ProductPurpose)
class ProductPurposeAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å"""
    
    list_display = ('name', 'is_active', 'products_count', 'sort_order', 'created_at')
    list_filter = ('is_active', 'created_at')
    search_fields = ('name', 'description')
    prepopulated_fields = {'slug': ('name',)}
    readonly_fields = ('created_at',)
    list_editable = ('is_active', 'sort_order')
    ordering = ('sort_order', 'name')
    save_on_top = True
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('name', 'slug', 'description')
        }),
        ('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': ('is_active', 'sort_order')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )
    
    def products_count(self, obj):
        return obj.product_set.count()
    products_count.short_description = '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤'


# ============================================
#              –ê–ö–¶–Ü–á (–ú–ê–°–û–í–Ü)
# ============================================

@admin.register(SalePromotion)
class SalePromotionAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –º–∞—Å–æ–≤–∏—Ö –∞–∫—Ü—ñ–π"""
    
    list_display = [
        'name', 'discount_type', 'discount_value', 
        'get_period', 'get_status', 'get_products_count', 
        'show_badge', 'created_at'
    ]
    list_filter = ['is_active', 'discount_type', 'start_date', 'end_date']
    search_fields = ['name', 'description']
    date_hierarchy = 'start_date'
    filter_horizontal = ['products', 'categories']
    readonly_fields = ['created_at', 'updated_at', 'created_by', 'get_products_preview']
    save_on_top = True
    
    fieldsets = (
        ('üìù –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('name', 'description')
        }),
        ('üí∞ –ó–Ω–∏–∂–∫–∞', {
            'fields': (
                'discount_type',
                'discount_value',
            ),
            'description': '–í–∫–∞–∂—ñ—Ç—å —Ç–∏–ø –∑–Ω–∏–∂–∫–∏ (–≤—ñ–¥—Å–æ—Ç–æ–∫ –∞–±–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Å—É–º–∞) —Ç–∞ —ó—ó —Ä–æ–∑–º—ñ—Ä'
        }),
        ('üéØ –¢–æ–≤–∞—Ä–∏ —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó', {
            'fields': ('products', 'categories', 'get_products_preview'),
            'description': '–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –∞–±–æ —Ü—ñ–ª—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∞–∫—Ü—ñ—ó'
        }),
        ('üìÖ –ü–µ—Ä—ñ–æ–¥ –¥—ñ—ó', {
            'fields': (
                ('start_date', 'end_date'),
            ),
        }),
        ('‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': (
                'is_active',
                'show_badge',
            ),
        }),
        ('üìä –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('created_at', 'updated_at', 'created_by'),
            'classes': ('collapse',),
        }),
    )
    
    actions = [
        'apply_promotion_to_products',
        'remove_promotion_from_products',
        'activate_promotions',
        'deactivate_promotions',
    ]
    
    def get_period(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É"""
        start = obj.start_date.strftime('%d.%m.%Y')
        end = obj.end_date.strftime('%d.%m.%Y')
        return f"{start} - {end}"
    get_period.short_description = '–ü–µ—Ä—ñ–æ–¥'
    
    def get_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –∞–∫—Ü—ñ—ó"""
        if obj.is_valid():
            days_left = (obj.end_date - timezone.now()).days
            return format_html(
                '<span class="badge badge-success">–ê–∫—Ç–∏–≤–Ω–∞ ({} –¥–Ω.)</span>',
                days_left
            )
        elif obj.end_date < timezone.now():
            return format_html('<span class="badge badge-secondary">–ó–∞–≤–µ—Ä—à–µ–Ω–∞</span>')
        else:
            return format_html('<span class="badge badge-warning">–û—á—ñ–∫—É—î—Ç—å—Å—è</span>')
    get_status.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def get_products_count(self, obj):
        """–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤"""
        direct = obj.products.count()
        from_categories = 0
        for cat in obj.categories.all():
            from_categories += cat.product_set.filter(is_active=True).count()
        
        total = direct + from_categories
        return format_html('<span class="badge badge-info">{} —Ç–æ–≤–∞—Ä—ñ–≤</span>', total)
    get_products_count.short_description = '–¢–æ–≤–∞—Ä—ñ–≤'
    
    def get_products_preview(self, obj):
        """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —Ç–æ–≤–∞—Ä—ñ–≤"""
        if not obj.pk:
            return "–ó–±–µ—Ä–µ–∂—ñ—Ç—å –∞–∫—Ü—ñ—é —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤"
        
        all_products = list(obj.products.all()[:5])
        html = "<ul>"
        for product in all_products:
            html += f"<li>{product.name} - {product.retail_price} ‚Ç¥</li>"
        
        if obj.products.count() > 5:
            html += f"<li><em>... —Ç–∞ —â–µ {obj.products.count() - 5} —Ç–æ–≤–∞—Ä—ñ–≤</em></li>"
        
        html += "</ul>"
        
        if obj.categories.exists():
            html += "<strong>–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:</strong><ul>"
            for cat in obj.categories.all():
                count = cat.product_set.filter(is_active=True).count()
                html += f"<li>{cat.name} ({count} —Ç–æ–≤–∞—Ä—ñ–≤)</li>"
            html += "</ul>"
        
        return format_html(html)
    get_products_preview.short_description = '–¢–æ–≤–∞—Ä–∏ –≤ –∞–∫—Ü—ñ—ó'
    
    # –î—ñ—ó
    
    def apply_promotion_to_products(self, request, queryset):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—é –¥–æ —Ç–æ–≤–∞—Ä—ñ–≤"""
        total = 0
        for promotion in queryset:
            if promotion.is_active:
                count = promotion.apply_to_products()
                total += count
        
        self.message_user(
            request,
            f"–ê–∫—Ü—ñ—é –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –¥–æ {total} —Ç–æ–≤–∞—Ä—ñ–≤",
            messages.SUCCESS
        )
    apply_promotion_to_products.short_description = "‚úì –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó –¥–æ —Ç–æ–≤–∞—Ä—ñ–≤"
    
    def remove_promotion_from_products(self, request, queryset):
        """–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ü—ñ—é –∑ —Ç–æ–≤–∞—Ä—ñ–≤"""
        total = 0
        for promotion in queryset:
            count = promotion.remove_from_products()
            total += count
        
        self.message_user(
            request,
            f"–ê–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ –∑ {total} —Ç–æ–≤–∞—Ä—ñ–≤",
            messages.SUCCESS
        )
    remove_promotion_from_products.short_description = "‚úï –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ü—ñ—ó –∑ —Ç–æ–≤–∞—Ä—ñ–≤"
    
    def activate_promotions(self, request, queryset):
        """–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó"""
        updated = queryset.update(is_active=True)
        self.message_user(request, f"–ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {updated} –∞–∫—Ü—ñ–π", messages.SUCCESS)
    activate_promotions.short_description = "‚úì –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó"
    
    def deactivate_promotions(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó"""
        updated = queryset.update(is_active=False)
        self.message_user(request, f"–î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {updated} –∞–∫—Ü—ñ–π", messages.SUCCESS)
    deactivate_promotions.short_description = "‚úï –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó"
    
    def save_model(self, request, obj, form, change):
        """–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–≤—Ç–æ—Ä–∞"""
        if not change:
            obj.created_by = request.user
        super().save_model(request, obj, form, change)


# ============================================
#       –¢–ï–ì–ò, –ù–û–í–ò–ù–ö–ò, –ê–ö–¶–Ü–ô–ù–Ü –ü–†–û–ü–û–ó–ò–¶–Ü–á
# ============================================

@admin.register(ProductTag)
class ProductTagAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤"""
    
    list_display = ['name', 'slug', 'is_active']
    list_editable = ['is_active']
    search_fields = ['name']
    prepopulated_fields = {'slug': ('name',)}
    ordering = ['name']


@admin.register(NewProduct)
class NewProductAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–æ–∫ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ"""
    
    list_display = ['product', 'get_is_new_status', 'sort_order', 'is_active', 'created_at']
    list_filter = ['is_active', 'created_at']
    search_fields = ['product__name', 'product__sku']
    list_editable = ['sort_order', 'is_active']
    ordering = ['sort_order', '-created_at']
    autocomplete_fields = ['product']
    
    fieldsets = (
        (None, {
            'fields': ('product', 'sort_order', 'is_active'),
            'description': '‚ú® –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä –≤ –±–ª–æ–∫ "–ù–æ–≤–∏–Ω–∫–∏" –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ. –¢–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º–∞—î —Å—Ç–∞—Ç—É—Å "–ù–æ–≤–∏–Ω–∫–∞".'
        }),
    )
    
    def get_is_new_status(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É is_new —Ç–æ–≤–∞—Ä—É"""
        if obj.product.is_new:
            return format_html('<span class="badge badge-success">‚úÖ –ù–æ–≤–∏–Ω–∫–∞</span>')
        return format_html('<span class="badge badge-danger">‚ùå –ù–µ –Ω–æ–≤–∏–Ω–∫–∞</span>')
    get_is_new_status.short_description = '–°—Ç–∞—Ç—É—Å NEW'
    
    def save_model(self, request, obj, form, change):
        """–ü—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ is_new=True –¥–ª—è —Ç–æ–≤–∞—Ä—É"""
        super().save_model(request, obj, form, change)
        if not obj.product.is_new:
            obj.product.is_new = True
            obj.product.save(update_fields=['is_new'])
        self.message_user(request, f'‚úÖ –¢–æ–≤–∞—Ä "{obj.product.name}" –¥–æ–¥–∞–Ω–æ –≤ –Ω–æ–≤–∏–Ω–∫–∏ —ñ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–º NEW')
    
    def delete_model(self, request, obj):
        """–ü—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–Ω—ñ–º–∞—î–º–æ is_new –∑ —Ç–æ–≤–∞—Ä—É"""
        product_name = obj.product.name
        obj.product.is_new = False
        obj.product.save(update_fields=['is_new'])
        super().delete_model(request, obj)
        self.message_user(request, f'‚ùå –¢–æ–≤–∞—Ä "{product_name}" –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –Ω–æ–≤–∏–Ω–æ–∫ —ñ –∑–Ω—è—Ç–æ —Å—Ç–∞—Ç—É—Å NEW')


@admin.register(PromotionProduct)
class PromotionProductAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –∞–∫—Ü—ñ–π–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ"""
    
    list_display = [
        'product', 
        'get_original_price_display', 
        'discount_price', 
        'get_discount_display',
        'sort_order', 
        'is_active', 
        'updated_at'
    ]
    list_filter = ['is_active', 'created_at', 'updated_at']
    search_fields = ['product__name', 'product__sku']
    list_editable = ['discount_price', 'sort_order', 'is_active']
    ordering = ['sort_order', '-created_at']
    readonly_fields = ['created_at', 'updated_at', 'get_discount_percentage']
    
    fieldsets = (
        ('–¢–æ–≤–∞—Ä', {
            'fields': ('product',)
        }),
        ('–¶—ñ–Ω–∏', {
            'fields': (
                'discount_price',
                'get_discount_percentage'
            ),
            'description': '–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –±—É–¥–µ –ø–µ—Ä–µ–∫—Ä–µ—Å–ª–µ–Ω–∞ –Ω–∞ —Å–∞–π—Ç—ñ, –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏–º–µ—Ç—å—Å—è –∞–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞'
        }),
        ('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': ('sort_order', 'is_active')
        }),
        ('–î–∞—Ç–∏', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def get_original_price_display(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏"""
        return f"{obj.get_original_price()} ‚Ç¥"
    get_original_price_display.short_description = '–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞'
    
    def get_discount_display(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–Ω–∏–∂–∫–∏ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö"""
        percentage = obj.get_discount_percentage()
        return format_html('<span class="badge badge-sale">-{}%</span>', percentage)
    get_discount_display.short_description = '–ó–Ω–∏–∂–∫–∞'


# ============================================
#              –õ–û–ì–ò –ó–ú–Ü–ù
# ============================================

@admin.register(ProductChangeLog)
class ProductChangeLogAdmin(admin.ModelAdmin):
    """–ü–µ—Ä–µ–≥–ª—è–¥ –ª–æ–≥—ñ–≤ –∑–º—ñ–Ω —Ç–æ–≤–∞—Ä—ñ–≤"""
    
    list_display = ['product', 'field_name', 'old_value', 'new_value', 'user', 'change_type', 'created_at']
    list_filter = ['change_type', 'created_at', 'user']
    search_fields = ['product__name', 'product__sku', 'field_name']
    date_hierarchy = 'created_at'
    readonly_fields = ['product', 'user', 'field_name', 'old_value', 'new_value', 'change_type', 'created_at']
    
    def has_add_permission(self, request):
        return False
    
    def has_change_permission(self, request, obj=None):
        return False
    
    def has_delete_permission(self, request, obj=None):
        return request.user.is_superuser


# ============================================
#       –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ì–†–£–ü–£–í–ê–ù–ù–Ø –í –ê–î–ú–Ü–ù–¶–Ü
# ============================================

# –î–æ–¥–∞—î–º–æ verbose_name_plural –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
Product._meta.verbose_name = "–¢–æ–≤–∞—Ä"
Product._meta.verbose_name_plural = "üì¶ –¢–æ–≤–∞—Ä–∏"
Product._meta.app_label = "products"

Category._meta.verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"
Category._meta.verbose_name_plural = "üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó"

Brand._meta.verbose_name = "–ë—Ä–µ–Ω–¥"
Brand._meta.verbose_name_plural = "üè∑Ô∏è –ë—Ä–µ–Ω–¥–∏"

ProductGroup._meta.verbose_name = "–ì—Ä—É–ø–∞ —Ç–æ–≤–∞—Ä—ñ–≤"
ProductGroup._meta.verbose_name_plural = "üìä –ì—Ä—É–ø–∏ —Ç–æ–≤–∞—Ä—ñ–≤"

ProductPurpose._meta.verbose_name = "–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è"
ProductPurpose._meta.verbose_name_plural = "üéØ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è"

SalePromotion._meta.verbose_name = "–ú–∞—Å–æ–≤–∞ –∞–∫—Ü—ñ—è"
SalePromotion._meta.verbose_name_plural = "üî• –ú–∞—Å–æ–≤—ñ –∞–∫—Ü—ñ—ó"

ProductTag._meta.verbose_name = "–¢–µ–≥"
ProductTag._meta.verbose_name_plural = "üè∑Ô∏è –¢–µ–≥–∏"

NewProduct._meta.verbose_name = "–ù–æ–≤–∏–Ω–∫–∞"
NewProduct._meta.verbose_name_plural = "‚ú® –ù–æ–≤–∏–Ω–∫–∏ (–ì–æ–ª–æ–≤–Ω–∞)"

PromotionProduct._meta.verbose_name = "–ê–∫—Ü—ñ–π–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è"
PromotionProduct._meta.verbose_name_plural = "üî• –ê–∫—Ü—ñ—ó (–ì–æ–ª–æ–≤–Ω–∞)"

ProductChangeLog._meta.verbose_name = "–õ–æ–≥ –∑–º—ñ–Ω"
ProductChangeLog._meta.verbose_name_plural = "üìù –õ–æ–≥–∏ –∑–º—ñ–Ω —Ç–æ–≤–∞—Ä—ñ–≤"

"""
–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å —Ç–æ–≤–∞—Ä—ñ–≤ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º
–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞: —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏, —Ü—ñ–Ω–∞–º–∏, –∞–∫—Ü—ñ—è–º–∏, —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
"""
from django.contrib import admin
from django.utils.html import format_html
from django.db import models
from django.utils import timezone
from django.contrib import messages
from django.urls import reverse
from django.utils.safestring import mark_safe
from decimal import Decimal

from .models import (
    Category, Product, ProductImage, ProductAttribute, 
    NewProduct, CategoryFilterConfig
)
from .forms import ProductAdminForm


# ============================================
#              INLINE –ê–î–ú–Ü–ù–Ü–°–¢–†–£–í–ê–ù–ù–Ø
# ============================================

class ProductImageInline(admin.TabularInline):
    model = ProductImage
    extra = 1
    fields = ['get_image_preview', 'image', 'alt_text', 'is_main', 'sort_order']
    readonly_fields = ['get_image_preview']
    classes = ['collapse']
    verbose_name = '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É'
    verbose_name_plural = 'üì∑ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É (–ø–µ—Ä—à–µ –±—É–¥–µ –≥–æ–ª–æ–≤–Ω–∏–º)'
    
    def get_image_preview(self, obj):
        """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if obj.image:
            return format_html(
                '<img src="{}" class="admin-thumbnail" />',
                obj.image.url
            )
        return "–ù–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
    get_image_preview.short_description = '–ü—Ä–µ–≤—å—é'


class ProductAttributeInline(admin.TabularInline):
    model = ProductAttribute
    extra = 1
    fields = ['name', 'value', 'sort_order']
    classes = ['collapse']
    verbose_name = '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞'
    verbose_name_plural = 'üìù –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä—É (–æ–±\'—î–º, –±—Ä–µ–Ω–¥, —Ç–∏–ø —Ç–æ—â–æ)'


class CategoryFilterConfigInline(admin.StackedInline):
    """Inline –¥–ª—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    model = CategoryFilterConfig
    can_delete = False
    verbose_name = '–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤'
    verbose_name_plural = '‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É'
    
    fieldsets = (
        ('–Ø–∫—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó', {
            'fields': (
                ('show_brand_filter', 'show_group_filter'),
                ('show_purpose_filter', 'show_price_filter'),
                'show_availability_filter',
            ),
            'description': '–í–∫–∞–∂—ñ—Ç—å —è–∫—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ —Ç–æ–≤–∞—Ä—ñ–≤ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
        }),
    )


# ============================================
#              –ö–ê–¢–ï–ì–û–†–Ü–á
# ============================================

@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤"""
    
    list_display = ['get_category_image', 'name', 'parent', 'get_products_count', 'get_filter_config', 'is_active', 'sort_order']
    list_display_links = ['get_category_image', 'name']
    list_filter = ['is_active', 'parent']
    search_fields = ['name', 'description']
    prepopulated_fields = {'slug': ('name',)}
    list_editable = ['is_active', 'sort_order']
    ordering = ['sort_order', 'name']
    save_on_top = True
    
    inlines = [CategoryFilterConfigInline]
    
    fieldsets = (
        ('üìÇ –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('name', 'slug', 'parent', 'image', 'description')
        }),
        ('‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': (('is_active', 'sort_order'),)
        }),
        ('üîç SEO (–Ω–µ–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ)', {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('collapse',)
        }),
    )
    
    def get_category_image(self, obj):
        """–ú—ñ–Ω—ñ–∞—Ç—é—Ä–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        if obj.image:
            return format_html(
                '<img src="{}" class="admin-thumbnail-small" />',
                obj.image.url
            )
        return format_html('<div class="admin-icon-placeholder">üìÇ</div>')
    get_category_image.short_description = '–§–æ—Ç–æ'
    
    def get_products_count(self, obj):
        """–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        count = obj.product_set.filter(is_active=True).count()
        return format_html('<span class="badge badge-info">{}</span>', count)
    get_products_count.short_description = '–¢–æ–≤–∞—Ä—ñ–≤'
    
    def get_filter_config(self, obj):
        """–ü–æ–∫–∞–∑—É—î —è–∫—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ñ"""
        try:
            config = obj.filter_config
            filters = []
            if config.show_brand_filter:
                filters.append('–ë—Ä–µ–Ω–¥')
            if config.show_group_filter:
                filters.append('–ì—Ä—É–ø–∞')
            if config.show_purpose_filter:
                filters.append('–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è')
            if config.show_price_filter:
                filters.append('–¶—ñ–Ω–∞')
            
            if filters:
                return format_html('<span class="filter-tags">{}</span>', ', '.join(filters))
            return '‚Äî'
        except CategoryFilterConfig.DoesNotExist:
            return format_html('<span class="text-warning">–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ</span>')
    get_filter_config.short_description = '–ê–∫—Ç–∏–≤–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏'
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤"""
        qs = super().get_queryset(request)
        return qs.select_related('parent').prefetch_related('filter_config')
    
    def save_model(self, request, obj, form, change):
        """–ü—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î"""
        super().save_model(request, obj, form, change)
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        CategoryFilterConfig.objects.get_or_create(category=obj)
    
    class Media:
        css = {
            'all': ('admin/css/custom_admin.css',)
        }
        js = ('admin/js/custom_admin.js',)


# ============================================
#              –¢–û–í–ê–†–ò (–ì–û–õ–û–í–ù–ò–ô –†–û–ó–î–Ü–õ)
# ============================================

@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º"""
    
    form = ProductAdminForm
    
    list_display = [
        'get_product_image', 'name', 'category', 'sku', 
        'get_price_display', 'get_sale_status',
        'stock', 'get_status_display', 'get_badges', 'updated_at'
    ]
    list_display_links = ['get_product_image', 'name']
    list_filter = [
        'is_active',
        'category',
        'is_sale',
        'is_top',
        'is_new',
        'is_featured',
        'created_at',
        'updated_at'
    ]
    search_fields = ['name', 'sku', 'description']
    prepopulated_fields = {'slug': ('name',)}
    list_editable = ['stock']
    ordering = ['sort_order', '-created_at']
    date_hierarchy = 'created_at'
    list_per_page = 50
    save_on_top = True
    
    # Autocomplete –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
    autocomplete_fields = []
    search_help_text = "–ü–æ—à—É–∫ –ø–æ –Ω–∞–∑–≤—ñ, –∞—Ä—Ç–∏–∫—É–ª—É –∞–±–æ –æ–ø–∏—Å—É —Ç–æ–≤–∞—Ä—É"
    
    inlines = [ProductImageInline, ProductAttributeInline]
    
    fieldsets = (
        ('üìã –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': (
                'name',
                'slug',
                'category',
                'sku',
                'description'
            ),
            'description': '–ù–∞–∑–≤–∞, –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–∞ –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É'
        }),
        ('üí∞ –¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è', {
            'fields': (
                ('retail_price', 'wholesale_price'),
                ('price_3_qty', 'price_5_qty'),
            ),
            'description': mark_safe('''
                <div class="pricing-help">
                    <strong>–ü—Ä–∞–≤–∏–ª–æ —Ü—ñ–Ω:</strong> 5+ ‚â§ 3+ ‚â§ –û–ø—Ç–æ–≤–∞ ‚â§ –ë–∞–∑–æ–≤–∞<br>
                    <strong>–†–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞</strong> ‚Äî –¥–ª—è –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö<br>
                    <strong>–û–ø—Ç–æ–≤–∞ —Ü—ñ–Ω–∞</strong> ‚Äî –¥–ª—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –æ–ø—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤<br>
                    <strong>–¶—ñ–Ω–∞ –≤—ñ–¥ 3/5 —à—Ç</strong> ‚Äî –∑–Ω–∏–∂–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ –≤—ñ–¥ 3 –∞–±–æ 5 —à—Ç—É–∫
                </div>
            ''')
        }),
        ('üî• –ê–∫—Ü—ñ–π–Ω–µ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è', {
            'fields': (
                'is_sale',
                'sale_price',
                ('sale_start_date', 'sale_end_date'),
            ),
            'classes': ('collapse',),
            'description': mark_safe('''
                <div class="sale-help">
                    <strong>–ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞</strong> –∑–∞–≤–∂–¥–∏ –º–∞—î –±—É—Ç–∏ –º–µ–Ω—à–æ—é –∑–∞ —Ä–æ–∑–¥—Ä—ñ–±–Ω—É<br>
                    –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –¥–∞—Ç–∏ - –∞–∫—Ü—ñ—è –ø–æ—Å—Ç—ñ–π–Ω–∞<br>
                    –ê–∫—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –Ω–∞ —Å–∞–π—Ç—ñ
                </div>
            ''')
        }),
        ('üì¶ –°–∫–ª–∞–¥ —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å', {
            'fields': (
                ('stock', 'is_active'),
                'is_featured'
            ),
            'description': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ —Ç–∞ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ'
        }),
        ('üè∑Ô∏è –ü–æ–∑–Ω–∞—á–∫–∏ —Ç–æ–≤–∞—Ä—É (–ë–µ–π–¥–∂—ñ)', {
            'fields': (
                ('is_top', 'is_new'),
                'sort_order'
            ),
            'description': mark_safe('''
                <strong>–•—ñ—Ç</strong> ‚Äî —Ç–æ–ø–æ–≤–∏–π/–ø–æ–ø—É–ª—è—Ä–Ω–∏–π —Ç–æ–≤–∞—Ä<br>
                <strong>–ù–æ–≤–∏–Ω–∫–∞</strong> ‚Äî –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä<br>
                <strong>–ê–∫—Ü—ñ—è</strong> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ is_sale=True
            ''')
        }),
        ('üîç SEO –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('collapse',),
        }),
        ('üìÖ –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',),
        }),
    )
    
    readonly_fields = ['created_at', 'updated_at']
    
    actions = [
        'activate_products', 
        'deactivate_products',
        'mark_as_sale',
        'unmark_as_sale',
        'mark_as_top',
        'mark_as_new',
        'set_sale_price_bulk',
        'clear_sale_prices',
        'export_to_csv',
    ]
    
    # ========== –ú–µ—Ç–æ–¥–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è ==========
    
    def get_product_image(self, obj):
        """–ú—ñ–Ω—ñ–∞—Ç—é—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É"""
        main_image = obj.images.filter(is_main=True).first() or obj.images.first()
        if main_image:
            return format_html(
                '<img src="{}" class="admin-thumbnail-small" />',
                main_image.image.url
            )
        return format_html('<div class="admin-icon-placeholder">üì¶</div>')
    get_product_image.short_description = '–§–æ—Ç–æ'
    
    def get_price_display(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ü—ñ–Ω"""
        prices = []
        prices.append(f"<strong>{obj.retail_price} ‚Ç¥</strong>")
        
        if obj.wholesale_price:
            prices.append(f"–û–ø—Ç: {obj.wholesale_price} ‚Ç¥")
        
        if obj.price_3_qty:
            prices.append(f"3+: {obj.price_3_qty} ‚Ç¥")
        
        if obj.price_5_qty:
            prices.append(f"5+: {obj.price_5_qty} ‚Ç¥")
        
        return format_html('<div class="price-stack">{}</div>', '<br>'.join(prices))
    get_price_display.short_description = '–¶—ñ–Ω–∏'
    
    def get_sale_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –∞–∫—Ü—ñ—ó"""
        if obj.is_sale and obj.sale_price:
            if obj.is_sale_active():
                discount = obj.get_discount_percentage()
                info = f'<span class="badge badge-sale">{obj.sale_price} ‚Ç¥ (-{discount}%)</span>'
                
                if obj.sale_end_date:
                    days_left = (obj.sale_end_date - timezone.now()).days
                    if days_left <= 3:
                        info += f'<br><span class="text-danger">‚è∞ {days_left} –¥–Ω.</span>'
                    else:
                        info += f'<br><span class="text-muted">{days_left} –¥–Ω.</span>'
                
                return format_html(info)
            else:
                return format_html('<span class="badge badge-inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω–∞</span>')
        return '‚Äî'
    get_sale_status.short_description = '–ê–∫—Ü—ñ—è'
    
    def get_status_display(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–æ–≤–∞—Ä—É"""
        if obj.is_active:
            if obj.stock > 0:
                return format_html('<span class="status-active">‚óè –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ</span>')
            else:
                return format_html('<span class="status-warning">‚ö† –ù–µ–º–∞—î –Ω–∞ —Å–∫–ª–∞–¥—ñ</span>')
        return format_html('<span class="status-inactive">‚úï –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π</span>')
    get_status_display.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def get_badges(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤"""
        stickers = obj.get_stickers()
        if not stickers:
            return '‚Äî'
        
        badges_html = []
        for sticker in stickers:
            badges_html.append(f'<span class="badge {sticker["class"]}">{sticker["text"]}</span>')
        
        return format_html(' '.join(badges_html))
    get_badges.short_description = '–ë–µ–π–¥–∂—ñ'
    
    # ========== –ú–∞—Å–æ–≤—ñ –¥—ñ—ó ==========
    
    def activate_products(self, request, queryset):
        """–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏"""
        updated = queryset.update(is_active=True)
        self.message_user(request, f"–ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    activate_products.short_description = "‚úì –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏"
    
    def deactivate_products(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏"""
        updated = queryset.update(is_active=False)
        self.message_user(request, f"–î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    deactivate_products.short_description = "‚úï –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏"
    
    def mark_as_sale(self, request, queryset):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –∞–∫—Ü—ñ–π–Ω—ñ"""
        count = 0
        for product in queryset:
            if product.sale_price:
                product.is_sale = True
                product.save(update_fields=['is_sale'])
                count += 1
        
        self.message_user(
            request, 
            f"–ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –∞–∫—Ü—ñ–π–Ω—ñ: {count} —Ç–æ–≤–∞—Ä—ñ–≤. –¢–æ–≤–∞—Ä–∏ –±–µ–∑ –≤–∫–∞–∑–∞–Ω–æ—ó –∞–∫—Ü—ñ–π–Ω–æ—ó —Ü—ñ–Ω–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ.",
            messages.WARNING if count < queryset.count() else messages.SUCCESS
        )
    mark_as_sale.short_description = "üî• –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ê–ö–¶–Ü–ô–ù–Ü"
    
    def unmark_as_sale(self, request, queryset):
        """–ó–Ω—è—Ç–∏ –ø–æ–∑–Ω–∞—á–∫—É –∞–∫—Ü—ñ–π–Ω–∏–π"""
        updated = queryset.update(is_sale=False)
        self.message_user(request, f"–ó–Ω—è—Ç–æ –ø–æ–∑–Ω–∞—á–∫—É –∞–∫—Ü—ñ–π–Ω–∏–π: {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    unmark_as_sale.short_description = "–ó–Ω—è—Ç–∏ –ø–æ–∑–Ω–∞—á–∫—É –ê–ö–¶–Ü–ô–ù–ò–ô"
    
    def mark_as_top(self, request, queryset):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –•–Ü–¢"""
        updated = queryset.update(is_top=True)
        self.message_user(request, f"–ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –•–Ü–¢: {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    mark_as_top.short_description = "‚≠ê –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –•–Ü–¢"
    
    def mark_as_new(self, request, queryset):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –Ω–æ–≤–∏–Ω–∫–∏"""
        updated = queryset.update(is_new=True)
        self.message_user(request, f"–ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –Ω–æ–≤–∏–Ω–∫–∏: {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    mark_as_new.short_description = "‚ú® –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ù–û–í–ò–ù–ö–ò"
    
    def clear_sale_prices(self, request, queryset):
        """–û—á–∏—Å—Ç–∏—Ç–∏ –∞–∫—Ü—ñ–π–Ω—ñ —Ü—ñ–Ω–∏"""
        queryset.update(
            is_sale=False,
            sale_price=None,
            sale_start_date=None,
            sale_end_date=None
        )
        self.message_user(request, f"–ê–∫—Ü—ñ–π–Ω—ñ —Ü—ñ–Ω–∏ –æ—á–∏—â–µ–Ω–æ –¥–ª—è {queryset.count()} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    clear_sale_prices.short_description = "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∞–∫—Ü—ñ–π–Ω—ñ —Ü—ñ–Ω–∏"
    
    def export_to_csv(self, request, queryset):
        """–ï–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ —É CSV"""
        import csv
        from django.http import HttpResponse
        
        response = HttpResponse(content_type='text/csv; charset=utf-8')
        response['Content-Disposition'] = 'attachment; filename="products_export.csv"'
        response.write('\ufeff')  # BOM –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∏—Ä–∏–ª–∏—Ü—ñ –≤ Excel
        
        writer = csv.writer(response)
        writer.writerow([
            'SKU', '–ù–∞–∑–≤–∞', '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–†–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞', '–û–ø—Ç–æ–≤–∞ —Ü—ñ–Ω–∞',
            '–ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', '–°—Ç–∞—Ç—É—Å'
        ])
        
        for product in queryset:
            writer.writerow([
                product.sku,
                product.name,
                product.category.name,
                product.retail_price,
                product.wholesale_price or '',
                product.sale_price or '',
                product.stock,
                '–ê–∫—Ç–∏–≤–Ω–∏–π' if product.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'
            ])
        
        self.message_user(request, f"–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {queryset.count()} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
        return response
    export_to_csv.short_description = "üìä –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤ CSV"
    
    # ========== –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è ==========
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º—ñ–∑—É—î–º–æ –∑–∞–ø–∏—Ç–∏"""
        qs = super().get_queryset(request)
        return qs.select_related('category').prefetch_related('images')
    
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞–¥–∞—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
        if db_field.name == "category":
            kwargs["queryset"] = Category.objects.filter(is_active=True).order_by('sort_order', 'name')
        return super().formfield_for_foreignkey(db_field, request, **kwargs)
    
    class Media:
        css = {
            'all': ('admin/css/custom_admin.css',)
        }
        js = ('admin/js/custom_admin.js',)

# ============================================
#       –ù–û–í–ò–ù–ö–ò, –ê–ö–¶–Ü–ô–ù–Ü –ü–†–û–ü–û–ó–ò–¶–Ü–á
# ============================================

@admin.register(NewProduct)
class NewProductAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–æ–∫ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ"""
    
    list_display = ['product', 'get_is_new_status', 'sort_order', 'created_at']
    list_filter = ['is_active', 'created_at']
    search_fields = ['product__name', 'product__sku']
    list_editable = ['sort_order']
    ordering = ['sort_order', '-created_at']
    autocomplete_fields = ['product']
    
    fieldsets = (
        (None, {
            'fields': ('product', 'sort_order', 'is_active'),
            'description': '‚ú® –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä –≤ –±–ª–æ–∫ "–ù–æ–≤–∏–Ω–∫–∏" –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ. –¢–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º–∞—î —Å—Ç–∞—Ç—É—Å "–ù–æ–≤–∏–Ω–∫–∞".'
        }),
    )
    
    def get_is_new_status(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É is_new —Ç–æ–≤–∞—Ä—É"""
        if obj.product.is_new:
            return format_html('<span class="badge badge-success">‚úÖ –ù–æ–≤–∏–Ω–∫–∞</span>')
        return format_html('<span class="badge badge-danger">‚ùå –ù–µ –Ω–æ–≤–∏–Ω–∫–∞</span>')
    get_is_new_status.short_description = '–°—Ç–∞—Ç—É—Å NEW'
    
    def save_model(self, request, obj, form, change):
        """–ü—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ is_new=True –¥–ª—è —Ç–æ–≤–∞—Ä—É"""
        super().save_model(request, obj, form, change)
        if not obj.product.is_new:
            obj.product.is_new = True
            obj.product.save(update_fields=['is_new'])
        self.message_user(request, f'‚úÖ –¢–æ–≤–∞—Ä "{obj.product.name}" –¥–æ–¥–∞–Ω–æ –≤ –Ω–æ–≤–∏–Ω–∫–∏ —ñ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–º NEW')
    
    def delete_model(self, request, obj):
        """–ü—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–Ω—ñ–º–∞—î–º–æ is_new –∑ —Ç–æ–≤–∞—Ä—É"""
        product_name = obj.product.name
        obj.product.is_new = False
        obj.product.save(update_fields=['is_new'])
        super().delete_model(request, obj)
        self.message_user(request, f'‚ùå –¢–æ–≤–∞—Ä "{product_name}" –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –Ω–æ–≤–∏–Ω–æ–∫ —ñ –∑–Ω—è—Ç–æ —Å—Ç–∞—Ç—É—Å NEW')
    
    class Media:
        css = {
            'all': ('admin/css/custom_admin.css',)
        }
        js = ('admin/js/custom_admin.js',)

# ============================================
#       –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ì–†–£–ü–£–í–ê–ù–ù–Ø –í –ê–î–ú–Ü–ù–¶–Ü
# ============================================

# –î–æ–¥–∞—î–º–æ verbose_name_plural –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
Product._meta.verbose_name = "–¢–æ–≤–∞—Ä"
Product._meta.verbose_name_plural = "üì¶ –¢–æ–≤–∞—Ä–∏"
Product._meta.app_label = "products"

Category._meta.verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"
Category._meta.verbose_name_plural = "üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó"

NewProduct._meta.verbose_name = "–ù–æ–≤–∏–Ω–∫–∞"
NewProduct._meta.verbose_name_plural = "‚ú® –ù–æ–≤–∏–Ω–∫–∏"

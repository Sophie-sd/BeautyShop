"""
–Ü–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –∑ JSON –Ω–∞ Render (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∂–µ –Ω–∞ Cloudinary)
–®–≤–∏–¥–∫–∏–π —ñ–º–ø–æ—Ä—Ç –±–µ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å - –µ–∫–æ–Ω–æ–º–∏—Ç—å –ø–∞–º'—è—Ç—å
"""
from django.core.management.base import BaseCommand
from django.core.files.storage import default_storage
from apps.products.models import Product, ProductImage, ProductAttribute, Category
from decimal import Decimal
import json
import os
import glob


class Command(BaseCommand):
    help = '–Ü–º–ø–æ—Ä—Ç—É—î —Ç–æ–≤–∞—Ä–∏ –∑ JSON (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∂–µ –Ω–∞ Cloudinary)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--input',
            type=str,
            default='products_data',
            help='–ü–∞–ø–∫–∞ –∑ JSON —Ñ–∞–π–ª–∞–º–∏'
        )

    def handle(self, *args, **options):
        input_dir = options['input']
        
        if not os.path.exists(input_dir):
            self.stdout.write(self.style.ERROR(f'‚ùå –ü–∞–ø–∫–∞ {input_dir} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞'))
            return
        
        self.stdout.write('üì¶ –Ü–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –∑ JSON...')
        
        # –ö–µ—à—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        categories_cache = {cat.slug: cat for cat in Category.objects.all()}
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ JSON —Ñ–∞–π–ª–∏
        json_files = sorted(glob.glob(f'{input_dir}/products_*.json'))
        
        if not json_files:
            self.stdout.write(self.style.ERROR(f'‚ùå JSON —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ {input_dir}'))
            return
        
        total_imported = 0
        total_skipped = 0
        
        for json_file in json_files:
            self.stdout.write(f'\nüìÑ –û–±—Ä–æ–±–∫–∞ {os.path.basename(json_file)}...')
            
            with open(json_file, 'r', encoding='utf-8') as f:
                products_data = json.load(f)
            
            for product_data in products_data:
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–æ–≤–∞—Ä –≤–∂–µ —ñ—Å–Ω—É—î
                    if Product.objects.filter(slug=product_data['slug']).exists():
                        total_skipped += 1
                        continue
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                    category = categories_cache.get(product_data['category_slug'])
                    if not category:
                        continue
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–≤–∞—Ä
                    product = Product.objects.create(
                        name=product_data['name'],
                        slug=product_data['slug'],
                        category=category,
                        description=product_data.get('description', ''),
                        retail_price=Decimal(product_data['retail_price']),
                        wholesale_price=Decimal(product_data['wholesale_price']) if product_data.get('wholesale_price') else None,
                        sale_price=Decimal(product_data['sale_price']) if product_data.get('sale_price') else None,
                        price_3_qty=Decimal(product_data['price_3_qty']) if product_data.get('price_3_qty') else None,
                        price_5_qty=Decimal(product_data['price_5_qty']) if product_data.get('price_5_qty') else None,
                        is_sale=product_data.get('is_sale', False),
                        is_top=product_data.get('is_top', False),
                        is_new=product_data.get('is_new', False),
                        is_featured=product_data.get('is_featured', False),
                        stock=product_data.get('stock', 100),
                        is_active=product_data.get('is_active', True),
                        sku=product_data.get('sku', '')
                    )
                    
                    # –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–≤–∂–µ –Ω–∞ Cloudinary, –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è)
                    for img_data in product_data.get('images', []):
                        # –°—Ç–≤–æ—Ä—é—î–º–æ ProductImage —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ path –∑ Cloudinary
                        path = img_data.get('path', '')
                        if path:
                            img = ProductImage(
                                product=product,
                                is_main=img_data.get('is_main', False),
                                sort_order=img_data.get('sort_order', 0),
                                alt_text=img_data.get('alt_text', '')
                            )
                            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ path - Cloudinary storage –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä—É—î URL
                            img.image = path
                            img.save()
                    
                    # –î–æ–¥–∞—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                    for attr_data in product_data.get('attributes', []):
                        ProductAttribute.objects.create(
                            product=product,
                            name=attr_data['name'],
                            value=attr_data['value'],
                            sort_order=attr_data.get('sort_order', 0)
                        )
                    
                    total_imported += 1
                    
                    if total_imported % 100 == 0:
                        self.stdout.write(f'  ‚úì {total_imported} —Ç–æ–≤–∞—Ä—ñ–≤ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ')
                
                except Exception as e:
                    self.stdout.write(self.style.WARNING(f'  ‚ö† –ü–æ–º–∏–ª–∫–∞: {str(e)}'))
                    continue
        
        self.stdout.write(self.style.SUCCESS(f'\n‚úÖ –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'))
        self.stdout.write(f'  ‚Ä¢ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: {total_imported} —Ç–æ–≤–∞—Ä—ñ–≤')
        self.stdout.write(f'  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {total_skipped} (–¥—É–±–ª—ñ–∫–∞—Ç–∏)')


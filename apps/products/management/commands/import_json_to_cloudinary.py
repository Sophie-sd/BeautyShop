"""
–Ü–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –∑ JSON —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ Cloudinary
"""
import json
import os
from pathlib import Path
from django.core.management.base import BaseCommand
from django.conf import settings
from django.core.files import File
from apps.products.models import Product, ProductImage, Category
from decimal import Decimal


class Command(BaseCommand):
    help = '–Ü–º–ø–æ—Ä—Ç—É—î —Ç–æ–≤–∞—Ä–∏ –∑ JSON —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ Cloudinary'
    
    def __init__(self):
        super().__init__()
        self.stats = {
            'products': 0,
            'images': 0,
            'errors': 0,
            'skipped': 0
        }
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--input',
            type=str,
            default='products_data',
            help='–ü–∞–ø–∫–∞ –∑ JSON —Ñ–∞–π–ª–∞–º–∏'
        )
        parser.add_argument(
            '--clear',
            action='store_true',
            help='–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ —ñ–º–ø–æ—Ä—Ç–æ–º'
        )
        parser.add_argument(
            '--limit',
            type=int,
            default=None,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤'
        )
    
    def handle(self, *args, **options):
        input_dir = options['input']
        clear = options['clear']
        limit = options.get('limit')
        
        self.stdout.write(self.style.SUCCESS('üöÄ –Ü–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –∑ JSON –Ω–∞ Cloudinary'))
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Cloudinary
        if 'cloudinary' not in str(settings.DEFAULT_FILE_STORAGE).lower():
            self.stdout.write(self.style.ERROR('‚ùå Cloudinary –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!'))
            self.stdout.write(f'DEFAULT_FILE_STORAGE: {settings.DEFAULT_FILE_STORAGE}')
            return
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Cloudinary –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π'))
        
        # –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏
        if clear:
            self.stdout.write('üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤...')
            Product.objects.all().delete()
            self.stdout.write('‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞')
        
        # –ü–æ—à—É–∫ JSON —Ñ–∞–π–ª—ñ–≤
        json_files = sorted(Path(input_dir).glob('*.json'))
        
        if not json_files:
            self.stdout.write(self.style.ERROR(f'‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª—ñ–≤ –≤ {input_dir}'))
            return
        
        self.stdout.write(f'üìÇ –ó–Ω–∞–π–¥–µ–Ω–æ {len(json_files)} JSON —Ñ–∞–π–ª—ñ–≤\n')
        
        total_products = 0
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ JSON —Ñ–∞–π–ª—É
        for json_file in json_files:
            self.stdout.write(f'üì¶ –û–±—Ä–æ–±–∫–∞ {json_file.name}...')
            
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    products_data = json.load(f)
                
                for product_data in products_data:
                    if limit and total_products >= limit:
                        break
                    
                    self.import_product(product_data)
                    total_products += 1
                    
                    if total_products % 100 == 0:
                        self.stdout.write(
                            f'  ‚úì {total_products} —Ç–æ–≤–∞—Ä—ñ–≤, '
                            f'{self.stats["images"]} –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ Cloudinary'
                        )
                
                if limit and total_products >= limit:
                    break
                    
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–∞–π–ª—É {json_file.name}: {e}'))
                continue
        
        # –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write(self.style.SUCCESS(f'\n‚úÖ –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'))
        self.stdout.write(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
        self.stdout.write(f'  ‚Ä¢ –¢–æ–≤–∞—Ä—ñ–≤ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: {self.stats["products"]}')
        self.stdout.write(f'  ‚Ä¢ –ó–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ Cloudinary: {self.stats["images"]}')
        self.stdout.write(f'  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.stats["skipped"]}')
        if self.stats['errors'] > 0:
            self.stdout.write(self.style.WARNING(f'  ‚Ä¢ –ü–æ–º–∏–ª–æ–∫: {self.stats["errors"]}'))
    
    def import_product(self, product_data):
        """–Ü–º–ø–æ—Ä—Ç—É—î –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ Cloudinary"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∞
            if Product.objects.filter(slug=product_data['slug']).exists():
                self.stats['skipped'] += 1
                return
            
            # –ö–∞—Ç–µ–≥–æ—Ä—ñ—è
            category_slug = product_data.get('category_slug', 'import-webosova')
            category = Category.objects.filter(slug=category_slug).first()
            
            if not category:
                category = Category.objects.filter(slug='import-webosova').first()
            
            if not category:
                category = Category.objects.create(
                    name='–Ü–º–ø–æ—Ä—Ç',
                    slug='import-webosova',
                    is_active=True
                )
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
            product = Product.objects.create(
                name=product_data['name'][:200],
                slug=product_data['slug'],
                category=category,
                description=product_data.get('description', '')[:2000],
                retail_price=Decimal(product_data['retail_price']) if product_data['retail_price'] else Decimal('0'),
                is_active=product_data.get('is_active', True),
                stock=product_data.get('stock', 100),
                is_new=product_data.get('is_new', False),
                is_top=product_data.get('is_top', False),
                is_sale=product_data.get('is_sale', False),
                is_featured=product_data.get('is_featured', False),
            )
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ Cloudinary
            for img_data in product_data.get('images', []):
                if self.upload_image_to_cloudinary(product, img_data):
                    self.stats['images'] += 1
            
            self.stats['products'] += 1
            
        except Exception as e:
            self.stats['errors'] += 1
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ —Ç–æ–≤–∞—Ä—É {product_data.get("name", "")[:50]}: {e}'))
    
    def upload_image_to_cloudinary(self, product, img_data):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ª–æ–∫–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ Cloudinary"""
        try:
            path = img_data.get('path', '')
            if not path:
                self.stdout.write(f'    ‚ö†Ô∏è  –ù–µ–º–∞—î path –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è')
                return False
            
            # –ü–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
            local_path = os.path.join(settings.MEDIA_ROOT, path)
            
            if not os.path.exists(local_path):
                self.stdout.write(f'    ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {local_path}')
                return False
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ ProductImage —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞ Cloudinary
            product_image = ProductImage(
                product=product,
                is_main=img_data.get('is_main', False),
                sort_order=img_data.get('sort_order', 0),
                alt_text=img_data.get('alt_text', '') or product.name
            )
            
            # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞ Cloudinary –ë–ï–ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
            with open(local_path, 'rb') as f:
                # skip_optimization=True —â–æ–± –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ PIL –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é
                product_image.image.save(
                    os.path.basename(path),
                    File(f),
                    save=False
                )
                product_image.save(skip_optimization=True)
            
            self.stdout.write(f'    ‚úì –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {os.path.basename(path)}')
            return True
            
        except Exception as e:
            self.stdout.write(f'    ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}')
            import traceback
            traceback.print_exc()
            return False


"""
–ü–æ–≤–Ω–∏–π —Ä–µ—ñ–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –æ—á–∏—â–µ–Ω–Ω—è–º —ñ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º Cloudinary URLs
"""
from django.core.management.base import BaseCommand
from django.core.files.storage import default_storage
from apps.products.models import Product, ProductImage, ProductAttribute, Category
from decimal import Decimal
import json
import os
import glob


class Command(BaseCommand):
    help = '–ü–æ–≤–Ω–∏–π —Ä–µ—ñ–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –∑ Cloudinary'

    def add_arguments(self, parser):
        parser.add_argument(
            '--input',
            type=str,
            default='products_data',
            help='–ü–∞–ø–∫–∞ –∑ JSON —Ñ–∞–π–ª–∞–º–∏'
        )

    def handle(self, *args, **options):
        input_dir = options['input']
        
        self.stdout.write('üîÑ –ü–û–í–ù–ò–ô –†–ï–Ü–ú–ü–û–†–¢ –¢–û–í–ê–†–Ü–í')
        self.stdout.write('=' * 50)
        
        # –ö—Ä–æ–∫ 1: –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å—Ç–∞—Ä—ñ —Ç–æ–≤–∞—Ä–∏
        old_count = Product.objects.count()
        self.stdout.write(f'\nüóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è {old_count} —Å—Ç–∞—Ä–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤...')
        Product.objects.all().delete()
        self.stdout.write(self.style.SUCCESS('‚úÖ –¢–æ–≤–∞—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–æ'))
        
        # –ö—Ä–æ–∫ 2: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å JSON —Ñ–∞–π–ª—ñ–≤
        if not os.path.exists(input_dir):
            self.stdout.write(self.style.ERROR(f'‚ùå –ü–∞–ø–∫–∞ {input_dir} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞'))
            return
        
        json_files = sorted(glob.glob(f'{input_dir}/products_*.json'))
        if not json_files:
            self.stdout.write(self.style.ERROR(f'‚ùå JSON —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ'))
            return
        
        self.stdout.write(f'\nüì¶ –ó–Ω–∞–π–¥–µ–Ω–æ {len(json_files)} JSON —Ñ–∞–π–ª—ñ–≤')
        
        # –ö—Ä–æ–∫ 3: –ö–µ—à—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        categories_cache = {cat.slug: cat for cat in Category.objects.all()}
        self.stdout.write(f'üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(categories_cache)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π')
        
        # –ö—Ä–æ–∫ 4: –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–æ–≤–∞—Ä–∏
        total_imported = 0
        total_images = 0
        
        for json_file in json_files:
            filename = os.path.basename(json_file)
            self.stdout.write(f'\nüìÑ –û–±—Ä–æ–±–∫–∞ {filename}...')
            
            with open(json_file, 'r', encoding='utf-8') as f:
                products_data = json.load(f)
            
            for product_data in products_data:
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                    category = categories_cache.get(product_data['category_slug'])
                    if not category:
                        continue
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–≤–∞—Ä
                    product = Product.objects.create(
                        name=product_data['name'],
                        slug=product_data['slug'],
                        category=category,
                        description=product_data.get('description', ''),
                        retail_price=Decimal(product_data['retail_price']),
                        wholesale_price=Decimal(product_data['wholesale_price']) if product_data.get('wholesale_price') else None,
                        sale_price=Decimal(product_data['sale_price']) if product_data.get('sale_price') else None,
                        price_3_qty=Decimal(product_data['price_3_qty']) if product_data.get('price_3_qty') else None,
                        price_5_qty=Decimal(product_data['price_5_qty']) if product_data.get('price_5_qty') else None,
                        is_sale=product_data.get('is_sale', False),
                        is_top=product_data.get('is_top', False),
                        is_new=product_data.get('is_new', False),
                        is_featured=product_data.get('is_featured', False),
                        stock=product_data.get('stock', 100),
                        is_active=product_data.get('is_active', True),
                        sku=product_data.get('sku', '')
                    )
                    
                    # –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ bulk_create —â–æ–± –æ–±—ñ–π—Ç–∏ save() –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é
                    images_to_create = []
                    for img_data in product_data.get('images', []):
                        path = img_data.get('path', '')
                        if path:
                            img = ProductImage(
                                product=product,
                                is_main=img_data.get('is_main', False),
                                sort_order=img_data.get('sort_order', 0),
                                alt_text=img_data.get('alt_text', '') or product.name
                            )
                            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ path –Ω–∞–ø—Ä—è–º—É - bulk_create –ù–ï –≤–∏–∫–ª–∏–∫–∞—î save()
                            img.image.name = path
                            images_to_create.append(img)
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º –ë–ï–ó –≤–∏–∫–ª–∏–∫—É save()
                    if images_to_create:
                        ProductImage.objects.bulk_create(images_to_create)
                        total_images += len(images_to_create)
                    
                    # –î–æ–¥–∞—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                    for attr_data in product_data.get('attributes', []):
                        ProductAttribute.objects.create(
                            product=product,
                            name=attr_data['name'],
                            value=attr_data['value'],
                            sort_order=attr_data.get('sort_order', 0)
                        )
                    
                    total_imported += 1
                    
                    if total_imported % 100 == 0:
                        self.stdout.write(f'  ‚úì {total_imported} —Ç–æ–≤–∞—Ä—ñ–≤ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ')
                
                except Exception as e:
                    self.stdout.write(self.style.WARNING(f'  ‚ö† –ü–æ–º–∏–ª–∫–∞: {str(e)}'))
                    continue
        
        # –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write('\n' + '=' * 50)
        self.stdout.write(self.style.SUCCESS('‚úÖ –†–ï–Ü–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù–û!'))
        self.stdout.write(f'\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
        self.stdout.write(f'  ‚Ä¢ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {total_imported}')
        self.stdout.write(f'  ‚Ä¢ –î–æ–¥–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {total_images}')
        self.stdout.write(f'  ‚Ä¢ –°–µ—Ä–µ–¥–Ω—å–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ —Ç–æ–≤–∞—Ä: {total_images/total_imported if total_imported > 0 else 0:.1f}')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        first_product = Product.objects.first()
        if first_product and first_product.images.exists():
            first_img = first_product.images.first()
            self.stdout.write(f'\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞:')
            self.stdout.write(f'  –¢–æ–≤–∞—Ä: {first_product.name}')
            self.stdout.write(f'  –ó–æ–±—Ä–∞–∂–µ–Ω—å: {first_product.images.count()}')
            self.stdout.write(f'  URL: {first_img.image.url}')


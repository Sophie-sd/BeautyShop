from django.contrib import admin
from django.utils.html import format_html
from django.db import models
from ckeditor.widgets import CKEditorWidget
from .models import Article


@admin.register(Article)
class ArticleAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–µ–π"""
    
    list_display = [
        'title', 'get_image_preview', 'is_published', 
        'created_at', 'get_excerpt_preview'
    ]
    list_filter = ['is_published', 'created_at']
    search_fields = ['title', 'content', 'excerpt']
    prepopulated_fields = {'slug': ('title',)}
    list_editable = ['is_published']
    date_hierarchy = 'created_at'
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('title', 'slug', 'excerpt', 'image')
        }),
        ('–ö–æ–Ω—Ç–µ–Ω—Ç', {
            'fields': ('content',),
            'classes': ('wide',)
        }),
        ('–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è', {
            'fields': ('is_published',)
        }),
        ('SEO', {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('collapse',)
        }),
    )
    
    # –ö–∞—Å—Ç–æ–º–Ω—ñ –≤—ñ–¥–∂–µ—Ç–∏
    formfield_overrides = {
        models.TextField: {'widget': CKEditorWidget()},
    }
    
    actions = ['publish_articles', 'unpublish_articles', 'duplicate_articles']
    
    def get_image_preview(self, obj):
        """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if obj.image:
            return format_html(
                '<img src="{}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 5px;" />',
                obj.image.url
            )
        return "üì∑ –ù–µ–º–∞—î"
    
    get_image_preview.short_description = "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
    
    def get_excerpt_preview(self, obj):
        """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –æ–ø–∏—Å—É"""
        if obj.excerpt:
            return obj.excerpt[:50] + "..." if len(obj.excerpt) > 50 else obj.excerpt
        return "–ù–µ–º–∞—î –æ–ø–∏—Å—É"
    
    get_excerpt_preview.short_description = "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å"
    
    def publish_articles(self, request, queryset):
        """–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—ñ"""
        updated = queryset.update(is_published=True)
        self.message_user(request, f"–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ {updated} —Å—Ç–∞—Ç–µ–π")
    
    publish_articles.short_description = "–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ"
    
    def unpublish_articles(self, request, queryset):
        """–°—Ö–æ–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—ñ"""
        updated = queryset.update(is_published=False)
        self.message_user(request, f"–°—Ö–æ–≤–∞–Ω–æ {updated} —Å—Ç–∞—Ç–µ–π")
    
    unpublish_articles.short_description = "–°—Ö–æ–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ"
    
    def duplicate_articles(self, request, queryset):
        """–î—É–±–ª—é–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—ñ"""
        duplicated = 0
        for article in queryset:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é
            article.pk = None
            article.title = f"{article.title} (–∫–æ–ø—ñ—è)"
            article.slug = f"{article.slug}-copy"
            article.is_published = False
            article.save()
            duplicated += 1
        
        self.message_user(request, f"–ü—Ä–æ–¥—É–±–ª—å–æ–≤–∞–Ω–æ {duplicated} —Å—Ç–∞—Ç–µ–π")
    
    duplicate_articles.short_description = "–î—É–±–ª—é–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ"
    
    class Media:
        css = {
            'all': ('admin/css/custom_admin.css',)
        }
        js = ('admin/js/custom_admin.js',)
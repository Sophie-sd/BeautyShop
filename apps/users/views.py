"""
Views –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
"""
from django.shortcuts import render, redirect, get_object_or_404
from django.views.generic import CreateView, TemplateView, View, FormView, UpdateView
from django.contrib.auth import login, authenticate
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.views import LoginView as DjangoLoginView, PasswordResetView
from django.contrib import messages
from django.urls import reverse_lazy
from .models import CustomUser
from .forms import WholesaleRegistrationForm, CustomLoginForm, CustomPasswordResetForm, ProfileEditForm
from .utils import send_verification_email
import logging

logger = logging.getLogger(__name__)


class WholesaleRegisterView(CreateView):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–ø—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
    
    model = CustomUser
    form_class = WholesaleRegistrationForm
    template_name = 'users/register.html'
    
    def form_valid(self, form):
        try:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (is_active=False)
            user = form.save()
            logger.info(f"üìù New user registered: {user.email} (username: {user.username})")
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ª–∏—Å—Ç –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
            if send_verification_email(user, self.request):
                logger.info(f"‚úÖ Verification email sent successfully to: {user.email}")
                messages.success(
                    self.request, 
                    '–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—É –ø–æ—à—Ç—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email.'
                )
            else:
                logger.error(f"‚ùå Failed to send verification email to: {user.email}")
                messages.warning(
                    self.request,
                    '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ª–∏—Å—Ç–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.'
                )
            
            return redirect('users:registration_pending')
            
        except Exception as e:
            logger.error(f"‚ùå Registration error: {str(e)}", exc_info=True)
            messages.error(
                self.request,
                f'–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {str(e)}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.'
            )
            return super().form_invalid(form)
    
    def form_invalid(self, form):
        messages.error(self.request, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —É —Ñ–æ—Ä–º—ñ.')
        return super().form_invalid(form)


class RegistrationPendingView(TemplateView):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó - –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email"""
    template_name = 'users/registration_pending.html'


class EmailVerificationView(View):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω"""
    
    def get(self, request, token):
        # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º
        try:
            user = CustomUser.objects.get(email_verification_token=token)
            
            # –í–µ—Ä–∏—Ñ—ñ–∫—É—î–º–æ email
            if user.verify_email(token):
                # –õ–æ–≥—ñ–Ω–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                login(request, user, backend='django.contrib.auth.backends.ModelBackend')
                
                messages.success(
                    request,
                    'Email —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ç–æ–≤—ñ —Ü—ñ–Ω–∏ –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É.'
                )
                return redirect('users:profile')
            else:
                messages.error(request, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.')
                return redirect('users:login')
                
        except CustomUser.DoesNotExist:
            messages.error(request, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∞–±–æ —Ç–æ–∫–µ–Ω –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ.')
            return redirect('users:login')


class ProfileView(LoginRequiredMixin, TemplateView):
    """–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    template_name = 'users/profile.html'
    
    def dispatch(self, request, *args, **kwargs):
        # –ë–ï–ó–ü–ï–ö–ê: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –ù–ï –º–æ–∂—É—Ç—å –∑–∞—Ö–æ–¥–∏—Ç–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç
        if request.user.is_authenticated and (request.user.is_staff or request.user.is_superuser):
            messages.error(
                request,
                'üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –Ω–µ –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø—É –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É –æ–ø—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.'
            )
            return redirect('/admin/')
        return super().dispatch(request, *args, **kwargs)
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = self.request.user
        
        context.update({
            'user': user,
            'is_wholesale': user.is_wholesale,
        })
        return context


class UserOrdersView(LoginRequiredMixin, TemplateView):
    """–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    template_name = 'users/orders.html'
    
    def dispatch(self, request, *args, **kwargs):
        # –ë–ï–ó–ü–ï–ö–ê: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –ù–ï –º–æ–∂—É—Ç—å –∑–∞—Ö–æ–¥–∏—Ç–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç
        if request.user.is_authenticated and (request.user.is_staff or request.user.is_superuser):
            messages.error(
                request,
                'üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –Ω–µ –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø—É –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É –æ–ø—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.'
            )
            return redirect('/admin/')
        return super().dispatch(request, *args, **kwargs)
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        from apps.orders.models import Order
        
        context['orders'] = Order.objects.filter(
            user=self.request.user
        ).order_by('-created_at')
        return context


class ProfileEditView(LoginRequiredMixin, UpdateView):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    model = CustomUser
    form_class = ProfileEditForm
    template_name = 'users/profile_edit.html'
    success_url = reverse_lazy('users:profile')
    
    def dispatch(self, request, *args, **kwargs):
        # –ë–ï–ó–ü–ï–ö–ê: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –ù–ï –º–æ–∂—É—Ç—å –∑–∞—Ö–æ–¥–∏—Ç–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç
        if request.user.is_authenticated and (request.user.is_staff or request.user.is_superuser):
            messages.error(
                request,
                'üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –Ω–µ –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø—É –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É –æ–ø—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.'
            )
            return redirect('/admin/')
        return super().dispatch(request, *args, **kwargs)
    
    def get_object(self, queryset=None):
        return self.request.user
    
    def form_valid(self, form):
        messages.success(self.request, '–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
        return super().form_valid(form)
    
    def form_invalid(self, form):
        messages.error(self.request, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —É —Ñ–æ—Ä–º—ñ.')
        return super().form_invalid(form)


class CustomLoginView(DjangoLoginView):
    """Custom login view –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é - –¢–Ü–õ–¨–ö–ò –¥–ª—è –æ–ø—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
    
    authentication_form = CustomLoginForm
    template_name = 'users/login.html'
    
    def form_valid(self, form):
        """
        –ë–ï–ó–ü–ï–ö–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¢–Ü–õ–¨–ö–ò WholesaleClientBackend
        –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ –≤—Ö—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        """
        username = form.cleaned_data.get('username')
        password = form.cleaned_data.get('password')
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à backend
        from apps.users.backends import WholesaleClientBackend
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫—É—î–º–æ –¢–Ü–õ–¨–ö–ò —á–µ—Ä–µ–∑ WholesaleClientBackend
        backend = WholesaleClientBackend()
        user = backend.authenticate(self.request, username=username, password=password)
        
        if user is None:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–æ–º—É –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–≤—ñ–π—Ç–∏
            try:
                found_user = CustomUser.objects.filter(email=username).first() or \
                             CustomUser.objects.filter(phone=username).first()
                
                if not found_user:
                    messages.error(
                        self.request,
                        '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º email –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è.'
                    )
                elif found_user.is_staff or found_user.is_superuser:
                    messages.error(
                        self.request,
                        'üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –≤—Ö–æ–¥–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ /admin/'
                    )
                elif not found_user.is_active:
                    messages.error(
                        self.request,
                        '–í–∞—à –∞–∫–∞—É–Ω—Ç —â–µ –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—É –ø–æ—à—Ç—É —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å email.'
                    )
                else:
                    messages.error(
                        self.request,
                        '–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é.'
                    )
            except Exception:
                messages.error(
                    self.request,
                    '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–º –æ–ø—Ç–æ–≤–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º.'
                )
            
            return self.form_invalid(form)
        
        # –Ø–∫—â–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞ - –ª–æ–≥—ñ–Ω–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        login(self.request, user, backend='apps.users.backends.WholesaleClientBackend')
        return super().form_valid(form)
    
    def form_invalid(self, form):
        # –Ø–∫—â–æ —Ñ–æ—Ä–º–∞ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∞ (–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –ø–æ–ª—è)
        if not form.data.get('username'):
            messages.error(self.request, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å email –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.')
        elif not form.data.get('password'):
            messages.error(self.request, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å.')
        
        return super().form_invalid(form)


class CustomPasswordResetView(PasswordResetView):
    """–ö–∞—Å—Ç–æ–º–Ω–∏–π view –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º"""
    
    form_class = CustomPasswordResetForm
    template_name = 'users/password_reset.html'
    email_template_name = 'registration/password_reset_email.html'
    subject_template_name = 'registration/password_reset_subject.txt'
    success_url = '/users/password/reset/done/'
    
    def form_valid(self, form):
        email = form.cleaned_data['email']
        logger.info(f"üîê Password reset requested for email: {email}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        users = CustomUser.objects.filter(email__iexact=email, is_active=True)
        if users.exists():
            logger.info(f"‚úÖ User found: {users.first().username}")
        else:
            logger.warning(f"‚ö†Ô∏è No active user found with email: {email}")
        
        try:
            response = super().form_valid(form)
            logger.info(f"üìß Password reset email should be sent to: {email}")
            return response
        except Exception as e:
            logger.error(f"‚ùå Error in password reset: {str(e)}", exc_info=True)
            messages.error(
                self.request,
                f'–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ email: {str(e)}'
            )
            return self.form_invalid(form)

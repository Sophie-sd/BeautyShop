"""
–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–∫—Ü—ñ–π —Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
"""
from django.contrib import admin
from django.utils.html import format_html
from django.utils import timezone
from .models import Promotion, PromoCode


@admin.register(Promotion)
class PromotionAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –∞–∫—Ü—ñ–π"""
    
    list_display = [
        'name', 'get_period', 'get_status', 'get_discounts', 
        'get_products_count', 'priority', 'is_active'
    ]
    list_filter = ['is_active', 'start_date', 'end_date']
    search_fields = ['name', 'description']
    filter_horizontal = ['products', 'categories']
    date_hierarchy = 'start_date'
    ordering = ['-priority', '-start_date']
    save_on_top = True
    
    fieldsets = (
        ('üìã –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('name', 'description', 'is_active', 'priority')
        }),
        ('üéØ –¢–æ–≤–∞—Ä–∏ —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó', {
            'fields': ('products', 'categories'),
            'description': '–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –∞–±–æ —Ü—ñ–ª—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∞–∫—Ü—ñ—ó'
        }),
        ('üí∞ –ó–Ω–∏–∂–∫–∏ –Ω–∞ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ —Ü—ñ–Ω', {
            'fields': (
                'retail_discount_percent',
                'wholesale_discount_percent',
                'qty3_discount_percent',
                'qty5_discount_percent',
            ),
            'description': '–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –∑–Ω–∏–∂–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É —Ü—ñ–Ω–∏. –ó–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º, —è–∫—â–æ –∑–Ω–∏–∂–∫–∞ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞'
        }),
        ('üìÖ –ü–µ—Ä—ñ–æ–¥ –¥—ñ—ó', {
            'fields': (('start_date', 'end_date'),)
        }),
    )
    
    def get_period(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É"""
        start = obj.start_date.strftime('%d.%m.%Y')
        end = obj.end_date.strftime('%d.%m.%Y')
        return f"{start} - {end}"
    get_period.short_description = '–ü–µ—Ä—ñ–æ–¥'
    
    def get_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –∞–∫—Ü—ñ—ó"""
        if obj.is_valid():
            days_left = (obj.end_date - timezone.now()).days
            return format_html(
                '<span class="badge badge-success">–ê–∫—Ç–∏–≤–Ω–∞ ({} –¥–Ω.)</span>',
                days_left
            )
        elif obj.end_date < timezone.now():
            return format_html('<span class="badge badge-secondary">–ó–∞–≤–µ—Ä—à–µ–Ω–∞</span>')
        else:
            return format_html('<span class="badge badge-warning">–û—á—ñ–∫—É—î—Ç—å—Å—è</span>')
    get_status.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def get_discounts(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–Ω–∏–∂–æ–∫"""
        discounts = []
        if obj.retail_discount_percent:
            discounts.append(f"–†–æ–∑–¥—Ä—ñ–±: {obj.retail_discount_percent}%")
        if obj.wholesale_discount_percent:
            discounts.append(f"–û–ø—Ç: {obj.wholesale_discount_percent}%")
        if obj.qty3_discount_percent:
            discounts.append(f"3+: {obj.qty3_discount_percent}%")
        if obj.qty5_discount_percent:
            discounts.append(f"5+: {obj.qty5_discount_percent}%")
        return format_html('<br>'.join(discounts)) if discounts else '‚Äî'
    get_discounts.short_description = '–ó–Ω–∏–∂–∫–∏'
    
    def get_products_count(self, obj):
        """–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤"""
        direct = obj.products.count()
        from_categories = 0
        for cat in obj.categories.all():
            from_categories += cat.product_set.filter(is_active=True).count()
        
        total = direct + from_categories
        return format_html('<span class="badge badge-info">{} —Ç–æ–≤–∞—Ä—ñ–≤</span>', total)
    get_products_count.short_description = '–¢–æ–≤–∞—Ä—ñ–≤'
    
    actions = ['apply_to_products_action', 'remove_from_products_action', 'activate', 'deactivate']
    
    def apply_to_products_action(self, request, queryset):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó –¥–æ —Ç–æ–≤–∞—Ä—ñ–≤"""
        total = 0
        for promotion in queryset:
            if promotion.is_valid():
                count = promotion.apply_to_products()
                total += count
        from django.contrib import messages
        self.message_user(request, f'‚úÖ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∞–∫—Ü—ñ—ó –¥–æ {total} —Ç–æ–≤–∞—Ä—ñ–≤', messages.SUCCESS)
    apply_to_products_action.short_description = '‚úì –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó –¥–æ —Ç–æ–≤–∞—Ä—ñ–≤'
    
    def remove_from_products_action(self, request, queryset):
        """–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ü—ñ—ó –∑ —Ç–æ–≤–∞—Ä—ñ–≤"""
        total = 0
        for promotion in queryset:
            count = promotion.remove_from_products()
            total += count
        from django.contrib import messages
        self.message_user(request, f'‚ùå –í–∏–¥–∞–ª–µ–Ω–æ –∞–∫—Ü—ñ—ó –∑ {total} —Ç–æ–≤–∞—Ä—ñ–≤', messages.SUCCESS)
    remove_from_products_action.short_description = '‚úï –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ü—ñ—ó –∑ —Ç–æ–≤–∞—Ä—ñ–≤'
    
    def activate(self, request, queryset):
        """–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó"""
        updated = queryset.update(is_active=True)
        from django.contrib import messages
        self.message_user(request, f'‚úÖ –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {updated} –∞–∫—Ü—ñ–π', messages.SUCCESS)
    activate.short_description = '‚úì –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó'
    
    def deactivate(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó"""
        updated = queryset.update(is_active=False)
        from django.contrib import messages
        self.message_user(request, f'‚ùå –î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {updated} –∞–∫—Ü—ñ–π', messages.SUCCESS)
    deactivate.short_description = '‚úï –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó'
    
    class Media:
        css = {
            'all': ('admin/css/custom_admin.css',)
        }
        js = ('admin/js/custom_admin.js',)


@admin.register(PromoCode)
class PromoCodeAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤"""
    
    list_display = [
        'code', 'get_discount', 'get_usage', 'get_period', 
        'get_status', 'min_order_amount', 'is_active'
    ]
    list_filter = ['is_active', 'discount_type', 'start_date', 'end_date']
    search_fields = ['code', 'description']
    readonly_fields = ['used_count']
    date_hierarchy = 'start_date'
    ordering = ['-created_at']
    save_on_top = True
    
    fieldsets = (
        ('üìã –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('code', 'description', 'is_active')
        }),
        ('üí∞ –ó–Ω–∏–∂–∫–∞', {
            'fields': (
                ('discount_type', 'discount_value'),
                'min_order_amount',
            )
        }),
        ('üìä –û–±–º–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è', {
            'fields': (('max_uses', 'used_count'),),
            'description': '–ó–∞–ª–∏—à—Ç–µ "–ú–∞–∫—Å–∏–º—É–º –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å" –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–ª—è –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ'
        }),
        ('üìÖ –ü–µ—Ä—ñ–æ–¥ –¥—ñ—ó', {
            'fields': (('start_date', 'end_date'),)
        }),
    )
    
    def get_discount(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–Ω–∏–∂–∫–∏"""
        if obj.discount_type == 'percentage':
            return format_html('<strong>-{}%</strong>', obj.discount_value)
        else:
            return format_html('<strong>-{} ‚Ç¥</strong>', obj.discount_value)
    get_discount.short_description = '–ó–Ω–∏–∂–∫–∞'
    
    def get_usage(self, obj):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
        if obj.max_uses:
            percent = (obj.used_count / obj.max_uses) * 100
            color = 'success' if percent < 80 else 'warning' if percent < 100 else 'danger'
            return format_html(
                '<span class="badge badge-{}">{}/{}</span>',
                color, obj.used_count, obj.max_uses
            )
        return format_html('<span class="badge badge-info">{}</span>', obj.used_count)
    get_usage.short_description = '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ'
    
    def get_period(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É"""
        start = obj.start_date.strftime('%d.%m.%Y')
        end = obj.end_date.strftime('%d.%m.%Y')
        return f"{start} - {end}"
    get_period.short_description = '–ü–µ—Ä—ñ–æ–¥'
    
    def get_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥—É"""
        is_valid, message = obj.is_valid()
        if is_valid:
            return format_html('<span class="badge badge-success">‚úì –ê–∫—Ç–∏–≤–Ω–∏–π</span>')
        else:
            return format_html('<span class="badge badge-danger">{}</span>', message)
    get_status.short_description = '–°—Ç–∞—Ç—É—Å'
    
    class Media:
        css = {
            'all': ('admin/css/custom_admin.css',)
        }
        js = ('admin/js/custom_admin.js',)

